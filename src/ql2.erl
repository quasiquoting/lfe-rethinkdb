%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.25.2
-module(ql2).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_VersionDummy.Version'/1, 'enum_value_by_symbol_VersionDummy.Version'/1]).
-export(['enum_symbol_by_value_VersionDummy.Protocol'/1, 'enum_value_by_symbol_VersionDummy.Protocol'/1]).
-export(['enum_symbol_by_value_Query.QueryType'/1, 'enum_value_by_symbol_Query.QueryType'/1]).
-export(['enum_symbol_by_value_Frame.FrameType'/1, 'enum_value_by_symbol_Frame.FrameType'/1]).
-export(['enum_symbol_by_value_Response.ResponseType'/1, 'enum_value_by_symbol_Response.ResponseType'/1]).
-export(['enum_symbol_by_value_Response.ErrorType'/1, 'enum_value_by_symbol_Response.ErrorType'/1]).
-export(['enum_symbol_by_value_Response.ResponseNote'/1, 'enum_value_by_symbol_Response.ResponseNote'/1]).
-export(['enum_symbol_by_value_Datum.DatumType'/1, 'enum_value_by_symbol_Datum.DatumType'/1]).
-export(['enum_symbol_by_value_Term.TermType'/1, 'enum_value_by_symbol_Term.TermType'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("ql2.hrl").



-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    verify_msg(Msg, Opts),
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'VersionDummy'{} ->
	  e_msg_VersionDummy(Msg, TrUserData);
      #'Query.AssocPair'{} ->
	  'e_msg_Query.AssocPair'(Msg, TrUserData);
      #'Query'{} -> e_msg_Query(Msg, TrUserData);
      #'Frame'{} -> e_msg_Frame(Msg, TrUserData);
      #'Backtrace'{} -> e_msg_Backtrace(Msg, TrUserData);
      #'Response'{} -> e_msg_Response(Msg, TrUserData);
      #'Datum.AssocPair'{} ->
	  'e_msg_Datum.AssocPair'(Msg, TrUserData);
      #'Datum'{} -> e_msg_Datum(Msg, TrUserData);
      #'Term.AssocPair'{} ->
	  'e_msg_Term.AssocPair'(Msg, TrUserData);
      #'Term'{} -> e_msg_Term(Msg, TrUserData)
    end.



e_msg_VersionDummy(_Msg, _TrUserData) -> <<>>.

'e_msg_Query.AssocPair'(Msg, TrUserData) ->
    'e_msg_Query.AssocPair'(Msg, <<>>, TrUserData).


'e_msg_Query.AssocPair'(#'Query.AssocPair'{key = F1,
					   val = F2},
			Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		TrF1 = id(F1, TrUserData),
		e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    if F2 == undefined -> B1;
       true ->
	   TrF2 = id(F2, TrUserData),
	   'e_mfield_Query.AssocPair_val'(TrF2, <<B1/binary, 18>>,
					  TrUserData)
    end.

e_msg_Query(Msg, TrUserData) ->
    e_msg_Query(Msg, <<>>, TrUserData).


e_msg_Query(#'Query'{type = F1, query = F2, token = F3,
		     'OBSOLETE_noreply' = F4, accepts_r_json = F5,
		     global_optargs = F6},
	    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		TrF1 = id(F1, TrUserData),
		'e_enum_Query.QueryType'(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		TrF2 = id(F2, TrUserData),
		e_mfield_Query_query(TrF2, <<B1/binary, 18>>,
				     TrUserData)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		TrF3 = id(F3, TrUserData),
		e_type_int64(TrF3, <<B2/binary, 24>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		TrF4 = id(F4, TrUserData),
		e_type_bool(TrF4, <<B3/binary, 32>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		TrF5 = id(F5, TrUserData),
		e_type_bool(TrF5, <<B4/binary, 40>>)
	 end,
    begin
      TrF6 = id(F6, TrUserData),
      if TrF6 == [] -> B5;
	 true ->
	     e_field_Query_global_optargs(TrF6, B5, TrUserData)
      end
    end.

e_msg_Frame(Msg, TrUserData) ->
    e_msg_Frame(Msg, <<>>, TrUserData).


e_msg_Frame(#'Frame'{type = F1, pos = F2, opt = F3},
	    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		TrF1 = id(F1, TrUserData),
		'e_enum_Frame.FrameType'(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		TrF2 = id(F2, TrUserData),
		e_type_int64(TrF2, <<B1/binary, 16>>)
	 end,
    if F3 == undefined -> B2;
       true ->
	   TrF3 = id(F3, TrUserData),
	   e_type_string(TrF3, <<B2/binary, 26>>)
    end.

e_msg_Backtrace(Msg, TrUserData) ->
    e_msg_Backtrace(Msg, <<>>, TrUserData).


e_msg_Backtrace(#'Backtrace'{frames = F1}, Bin,
		TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true -> e_field_Backtrace_frames(TrF1, Bin, TrUserData)
      end
    end.

e_msg_Response(Msg, TrUserData) ->
    e_msg_Response(Msg, <<>>, TrUserData).


e_msg_Response(#'Response'{type = F1, error_type = F2,
			   notes = F3, token = F4, response = F5,
			   backtrace = F6, profile = F7},
	       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		TrF1 = id(F1, TrUserData),
		'e_enum_Response.ResponseType'(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		TrF2 = id(F2, TrUserData),
		'e_enum_Response.ErrorType'(TrF2, <<B1/binary, 56>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   if TrF3 == [] -> B2;
	      true -> e_field_Response_notes(TrF3, B2, TrUserData)
	   end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		TrF4 = id(F4, TrUserData),
		e_type_int64(TrF4, <<B3/binary, 16>>)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   if TrF5 == [] -> B4;
	      true -> e_field_Response_response(TrF5, B4, TrUserData)
	   end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		TrF6 = id(F6, TrUserData),
		e_mfield_Response_backtrace(TrF6, <<B5/binary, 34>>,
					    TrUserData)
	 end,
    if F7 == undefined -> B6;
       true ->
	   TrF7 = id(F7, TrUserData),
	   e_mfield_Response_profile(TrF7, <<B6/binary, 42>>,
				     TrUserData)
    end.

'e_msg_Datum.AssocPair'(Msg, TrUserData) ->
    'e_msg_Datum.AssocPair'(Msg, <<>>, TrUserData).


'e_msg_Datum.AssocPair'(#'Datum.AssocPair'{key = F1,
					   val = F2},
			Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		TrF1 = id(F1, TrUserData),
		e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    if F2 == undefined -> B1;
       true ->
	   TrF2 = id(F2, TrUserData),
	   'e_mfield_Datum.AssocPair_val'(TrF2, <<B1/binary, 18>>,
					  TrUserData)
    end.

e_msg_Datum(Msg, TrUserData) ->
    e_msg_Datum(Msg, <<>>, TrUserData).


e_msg_Datum(#'Datum'{type = F1, r_bool = F2, r_num = F3,
		     r_str = F4, r_array = F5, r_object = F6},
	    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		TrF1 = id(F1, TrUserData),
		'e_enum_Datum.DatumType'(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		TrF2 = id(F2, TrUserData),
		e_type_bool(TrF2, <<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		TrF3 = id(F3, TrUserData),
		e_type_double(TrF3, <<B2/binary, 25>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		TrF4 = id(F4, TrUserData),
		e_type_string(TrF4, <<B3/binary, 34>>)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   if TrF5 == [] -> B4;
	      true -> e_field_Datum_r_array(TrF5, B4, TrUserData)
	   end
	 end,
    begin
      TrF6 = id(F6, TrUserData),
      if TrF6 == [] -> B5;
	 true -> e_field_Datum_r_object(TrF6, B5, TrUserData)
      end
    end.

'e_msg_Term.AssocPair'(Msg, TrUserData) ->
    'e_msg_Term.AssocPair'(Msg, <<>>, TrUserData).


'e_msg_Term.AssocPair'(#'Term.AssocPair'{key = F1,
					 val = F2},
		       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		TrF1 = id(F1, TrUserData),
		e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    if F2 == undefined -> B1;
       true ->
	   TrF2 = id(F2, TrUserData),
	   'e_mfield_Term.AssocPair_val'(TrF2, <<B1/binary, 18>>,
					 TrUserData)
    end.

e_msg_Term(Msg, TrUserData) ->
    e_msg_Term(Msg, <<>>, TrUserData).


e_msg_Term(#'Term'{type = F1, datum = F2, args = F3,
		   optargs = F4},
	   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		TrF1 = id(F1, TrUserData),
		'e_enum_Term.TermType'(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		TrF2 = id(F2, TrUserData),
		e_mfield_Term_datum(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   if TrF3 == [] -> B2;
	      true -> e_field_Term_args(TrF3, B2, TrUserData)
	   end
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      if TrF4 == [] -> B3;
	 true -> e_field_Term_optargs(TrF4, B3, TrUserData)
      end
    end.

'e_mfield_Query.AssocPair_val'(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Term(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Query_query(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Term(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Query_global_optargs(Msg, Bin, TrUserData) ->
    SubBin = 'e_msg_Query.AssocPair'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Query_global_optargs([Elem | Rest], Bin,
			     TrUserData) ->
    Bin2 = <<Bin/binary, 50>>,
    Bin3 = e_mfield_Query_global_optargs(id(Elem,
					    TrUserData),
					 Bin2, TrUserData),
    e_field_Query_global_optargs(Rest, Bin3, TrUserData);
e_field_Query_global_optargs([], Bin, _TrUserData) ->
    Bin.

e_mfield_Backtrace_frames(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Frame(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Backtrace_frames([Elem | Rest], Bin,
			 TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_Backtrace_frames(id(Elem, TrUserData),
				     Bin2, TrUserData),
    e_field_Backtrace_frames(Rest, Bin3, TrUserData);
e_field_Backtrace_frames([], Bin, _TrUserData) -> Bin.

e_field_Response_notes([Elem | Rest], Bin,
		       TrUserData) ->
    Bin2 = <<Bin/binary, 48>>,
    Bin3 = 'e_enum_Response.ResponseNote'(id(Elem,
					     TrUserData),
					  Bin2),
    e_field_Response_notes(Rest, Bin3, TrUserData);
e_field_Response_notes([], Bin, _TrUserData) -> Bin.

e_mfield_Response_response(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Datum(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Response_response([Elem | Rest], Bin,
			  TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_Response_response(id(Elem, TrUserData),
				      Bin2, TrUserData),
    e_field_Response_response(Rest, Bin3, TrUserData);
e_field_Response_response([], Bin, _TrUserData) -> Bin.

e_mfield_Response_backtrace(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Backtrace(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Response_profile(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Datum(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_Datum.AssocPair_val'(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Datum(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Datum_r_array(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Datum(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Datum_r_array([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_mfield_Datum_r_array(id(Elem, TrUserData),
				  Bin2, TrUserData),
    e_field_Datum_r_array(Rest, Bin3, TrUserData);
e_field_Datum_r_array([], Bin, _TrUserData) -> Bin.

e_mfield_Datum_r_object(Msg, Bin, TrUserData) ->
    SubBin = 'e_msg_Datum.AssocPair'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Datum_r_object([Elem | Rest], Bin,
		       TrUserData) ->
    Bin2 = <<Bin/binary, 50>>,
    Bin3 = e_mfield_Datum_r_object(id(Elem, TrUserData),
				   Bin2, TrUserData),
    e_field_Datum_r_object(Rest, Bin3, TrUserData);
e_field_Datum_r_object([], Bin, _TrUserData) -> Bin.

'e_mfield_Term.AssocPair_val'(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Term(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Term_datum(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Datum(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Term_args(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Term(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Term_args([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_Term_args(id(Elem, TrUserData), Bin2,
			      TrUserData),
    e_field_Term_args(Rest, Bin3, TrUserData);
e_field_Term_args([], Bin, _TrUserData) -> Bin.

e_mfield_Term_optargs(Msg, Bin, TrUserData) ->
    SubBin = 'e_msg_Term.AssocPair'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Term_optargs([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_Term_optargs(id(Elem, TrUserData), Bin2,
				 TrUserData),
    e_field_Term_optargs(Rest, Bin3, TrUserData);
e_field_Term_optargs([], Bin, _TrUserData) -> Bin.



'e_enum_Query.QueryType'('START', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_Query.QueryType'('CONTINUE', Bin) ->
    <<Bin/binary, 2>>;
'e_enum_Query.QueryType'('STOP', Bin) ->
    <<Bin/binary, 3>>;
'e_enum_Query.QueryType'('NOREPLY_WAIT', Bin) ->
    <<Bin/binary, 4>>;
'e_enum_Query.QueryType'('SERVER_INFO', Bin) ->
    <<Bin/binary, 5>>;
'e_enum_Query.QueryType'(V, Bin) -> e_varint(V, Bin).

'e_enum_Frame.FrameType'('POS', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_Frame.FrameType'('OPT', Bin) ->
    <<Bin/binary, 2>>;
'e_enum_Frame.FrameType'(V, Bin) -> e_varint(V, Bin).

'e_enum_Response.ResponseType'('SUCCESS_ATOM', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_Response.ResponseType'('SUCCESS_SEQUENCE',
			       Bin) ->
    <<Bin/binary, 2>>;
'e_enum_Response.ResponseType'('SUCCESS_PARTIAL',
			       Bin) ->
    <<Bin/binary, 3>>;
'e_enum_Response.ResponseType'('WAIT_COMPLETE', Bin) ->
    <<Bin/binary, 4>>;
'e_enum_Response.ResponseType'('SERVER_INFO', Bin) ->
    <<Bin/binary, 5>>;
'e_enum_Response.ResponseType'('CLIENT_ERROR', Bin) ->
    <<Bin/binary, 16>>;
'e_enum_Response.ResponseType'('COMPILE_ERROR', Bin) ->
    <<Bin/binary, 17>>;
'e_enum_Response.ResponseType'('RUNTIME_ERROR', Bin) ->
    <<Bin/binary, 18>>;
'e_enum_Response.ResponseType'(V, Bin) ->
    e_varint(V, Bin).

'e_enum_Response.ErrorType'('INTERNAL', Bin) ->
    <<Bin/binary, 192, 132, 61>>;
'e_enum_Response.ErrorType'('RESOURCE_LIMIT', Bin) ->
    <<Bin/binary, 128, 137, 122>>;
'e_enum_Response.ErrorType'('QUERY_LOGIC', Bin) ->
    <<Bin/binary, 192, 141, 183, 1>>;
'e_enum_Response.ErrorType'('NON_EXISTENCE', Bin) ->
    <<Bin/binary, 224, 154, 189, 1>>;
'e_enum_Response.ErrorType'('OP_FAILED', Bin) ->
    <<Bin/binary, 160, 159, 250, 1>>;
'e_enum_Response.ErrorType'('OP_INDETERMINATE', Bin) ->
    <<Bin/binary, 192, 172, 128, 2>>;
'e_enum_Response.ErrorType'('USER', Bin) ->
    <<Bin/binary, 192, 150, 177, 2>>;
'e_enum_Response.ErrorType'('PERMISSION_ERROR', Bin) ->
    <<Bin/binary, 128, 155, 238, 2>>;
'e_enum_Response.ErrorType'(V, Bin) -> e_varint(V, Bin).

'e_enum_Response.ResponseNote'('SEQUENCE_FEED', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_Response.ResponseNote'('ATOM_FEED', Bin) ->
    <<Bin/binary, 2>>;
'e_enum_Response.ResponseNote'('ORDER_BY_LIMIT_FEED',
			       Bin) ->
    <<Bin/binary, 3>>;
'e_enum_Response.ResponseNote'('UNIONED_FEED', Bin) ->
    <<Bin/binary, 4>>;
'e_enum_Response.ResponseNote'('INCLUDES_STATES',
			       Bin) ->
    <<Bin/binary, 5>>;
'e_enum_Response.ResponseNote'(V, Bin) ->
    e_varint(V, Bin).

'e_enum_Datum.DatumType'('R_NULL', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_Datum.DatumType'('R_BOOL', Bin) ->
    <<Bin/binary, 2>>;
'e_enum_Datum.DatumType'('R_NUM', Bin) ->
    <<Bin/binary, 3>>;
'e_enum_Datum.DatumType'('R_STR', Bin) ->
    <<Bin/binary, 4>>;
'e_enum_Datum.DatumType'('R_ARRAY', Bin) ->
    <<Bin/binary, 5>>;
'e_enum_Datum.DatumType'('R_OBJECT', Bin) ->
    <<Bin/binary, 6>>;
'e_enum_Datum.DatumType'('R_JSON', Bin) ->
    <<Bin/binary, 7>>;
'e_enum_Datum.DatumType'(V, Bin) -> e_varint(V, Bin).

'e_enum_Term.TermType'('DATUM', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_Term.TermType'('MAKE_ARRAY', Bin) ->
    <<Bin/binary, 2>>;
'e_enum_Term.TermType'('MAKE_OBJ', Bin) ->
    <<Bin/binary, 3>>;
'e_enum_Term.TermType'('VAR', Bin) ->
    <<Bin/binary, 10>>;
'e_enum_Term.TermType'('JAVASCRIPT', Bin) ->
    <<Bin/binary, 11>>;
'e_enum_Term.TermType'('UUID', Bin) ->
    <<Bin/binary, 169, 1>>;
'e_enum_Term.TermType'('HTTP', Bin) ->
    <<Bin/binary, 153, 1>>;
'e_enum_Term.TermType'('ERROR', Bin) ->
    <<Bin/binary, 12>>;
'e_enum_Term.TermType'('IMPLICIT_VAR', Bin) ->
    <<Bin/binary, 13>>;
'e_enum_Term.TermType'('DB', Bin) -> <<Bin/binary, 14>>;
'e_enum_Term.TermType'('TABLE', Bin) ->
    <<Bin/binary, 15>>;
'e_enum_Term.TermType'('GET', Bin) ->
    <<Bin/binary, 16>>;
'e_enum_Term.TermType'('GET_ALL', Bin) ->
    <<Bin/binary, 78>>;
'e_enum_Term.TermType'('EQ', Bin) -> <<Bin/binary, 17>>;
'e_enum_Term.TermType'('NE', Bin) -> <<Bin/binary, 18>>;
'e_enum_Term.TermType'('LT', Bin) -> <<Bin/binary, 19>>;
'e_enum_Term.TermType'('LE', Bin) -> <<Bin/binary, 20>>;
'e_enum_Term.TermType'('GT', Bin) -> <<Bin/binary, 21>>;
'e_enum_Term.TermType'('GE', Bin) -> <<Bin/binary, 22>>;
'e_enum_Term.TermType'('NOT', Bin) ->
    <<Bin/binary, 23>>;
'e_enum_Term.TermType'('ADD', Bin) ->
    <<Bin/binary, 24>>;
'e_enum_Term.TermType'('SUB', Bin) ->
    <<Bin/binary, 25>>;
'e_enum_Term.TermType'('MUL', Bin) ->
    <<Bin/binary, 26>>;
'e_enum_Term.TermType'('DIV', Bin) ->
    <<Bin/binary, 27>>;
'e_enum_Term.TermType'('MOD', Bin) ->
    <<Bin/binary, 28>>;
'e_enum_Term.TermType'('FLOOR', Bin) ->
    <<Bin/binary, 183, 1>>;
'e_enum_Term.TermType'('CEIL', Bin) ->
    <<Bin/binary, 184, 1>>;
'e_enum_Term.TermType'('ROUND', Bin) ->
    <<Bin/binary, 185, 1>>;
'e_enum_Term.TermType'('APPEND', Bin) ->
    <<Bin/binary, 29>>;
'e_enum_Term.TermType'('PREPEND', Bin) ->
    <<Bin/binary, 80>>;
'e_enum_Term.TermType'('DIFFERENCE', Bin) ->
    <<Bin/binary, 95>>;
'e_enum_Term.TermType'('SET_INSERT', Bin) ->
    <<Bin/binary, 88>>;
'e_enum_Term.TermType'('SET_INTERSECTION', Bin) ->
    <<Bin/binary, 89>>;
'e_enum_Term.TermType'('SET_UNION', Bin) ->
    <<Bin/binary, 90>>;
'e_enum_Term.TermType'('SET_DIFFERENCE', Bin) ->
    <<Bin/binary, 91>>;
'e_enum_Term.TermType'('SLICE', Bin) ->
    <<Bin/binary, 30>>;
'e_enum_Term.TermType'('SKIP', Bin) ->
    <<Bin/binary, 70>>;
'e_enum_Term.TermType'('LIMIT', Bin) ->
    <<Bin/binary, 71>>;
'e_enum_Term.TermType'('OFFSETS_OF', Bin) ->
    <<Bin/binary, 87>>;
'e_enum_Term.TermType'('CONTAINS', Bin) ->
    <<Bin/binary, 93>>;
'e_enum_Term.TermType'('GET_FIELD', Bin) ->
    <<Bin/binary, 31>>;
'e_enum_Term.TermType'('KEYS', Bin) ->
    <<Bin/binary, 94>>;
'e_enum_Term.TermType'('VALUES', Bin) ->
    <<Bin/binary, 186, 1>>;
'e_enum_Term.TermType'('OBJECT', Bin) ->
    <<Bin/binary, 143, 1>>;
'e_enum_Term.TermType'('HAS_FIELDS', Bin) ->
    <<Bin/binary, 32>>;
'e_enum_Term.TermType'('WITH_FIELDS', Bin) ->
    <<Bin/binary, 96>>;
'e_enum_Term.TermType'('PLUCK', Bin) ->
    <<Bin/binary, 33>>;
'e_enum_Term.TermType'('WITHOUT', Bin) ->
    <<Bin/binary, 34>>;
'e_enum_Term.TermType'('MERGE', Bin) ->
    <<Bin/binary, 35>>;
'e_enum_Term.TermType'('BETWEEN_DEPRECATED', Bin) ->
    <<Bin/binary, 36>>;
'e_enum_Term.TermType'('BETWEEN', Bin) ->
    <<Bin/binary, 182, 1>>;
'e_enum_Term.TermType'('REDUCE', Bin) ->
    <<Bin/binary, 37>>;
'e_enum_Term.TermType'('MAP', Bin) ->
    <<Bin/binary, 38>>;
'e_enum_Term.TermType'('FOLD', Bin) ->
    <<Bin/binary, 187, 1>>;
'e_enum_Term.TermType'('FILTER', Bin) ->
    <<Bin/binary, 39>>;
'e_enum_Term.TermType'('CONCAT_MAP', Bin) ->
    <<Bin/binary, 40>>;
'e_enum_Term.TermType'('ORDER_BY', Bin) ->
    <<Bin/binary, 41>>;
'e_enum_Term.TermType'('DISTINCT', Bin) ->
    <<Bin/binary, 42>>;
'e_enum_Term.TermType'('COUNT', Bin) ->
    <<Bin/binary, 43>>;
'e_enum_Term.TermType'('IS_EMPTY', Bin) ->
    <<Bin/binary, 86>>;
'e_enum_Term.TermType'('UNION', Bin) ->
    <<Bin/binary, 44>>;
'e_enum_Term.TermType'('NTH', Bin) ->
    <<Bin/binary, 45>>;
'e_enum_Term.TermType'('BRACKET', Bin) ->
    <<Bin/binary, 170, 1>>;
'e_enum_Term.TermType'('INNER_JOIN', Bin) ->
    <<Bin/binary, 48>>;
'e_enum_Term.TermType'('OUTER_JOIN', Bin) ->
    <<Bin/binary, 49>>;
'e_enum_Term.TermType'('EQ_JOIN', Bin) ->
    <<Bin/binary, 50>>;
'e_enum_Term.TermType'('ZIP', Bin) ->
    <<Bin/binary, 72>>;
'e_enum_Term.TermType'('RANGE', Bin) ->
    <<Bin/binary, 173, 1>>;
'e_enum_Term.TermType'('INSERT_AT', Bin) ->
    <<Bin/binary, 82>>;
'e_enum_Term.TermType'('DELETE_AT', Bin) ->
    <<Bin/binary, 83>>;
'e_enum_Term.TermType'('CHANGE_AT', Bin) ->
    <<Bin/binary, 84>>;
'e_enum_Term.TermType'('SPLICE_AT', Bin) ->
    <<Bin/binary, 85>>;
'e_enum_Term.TermType'('COERCE_TO', Bin) ->
    <<Bin/binary, 51>>;
'e_enum_Term.TermType'('TYPE_OF', Bin) ->
    <<Bin/binary, 52>>;
'e_enum_Term.TermType'('UPDATE', Bin) ->
    <<Bin/binary, 53>>;
'e_enum_Term.TermType'('DELETE', Bin) ->
    <<Bin/binary, 54>>;
'e_enum_Term.TermType'('REPLACE', Bin) ->
    <<Bin/binary, 55>>;
'e_enum_Term.TermType'('INSERT', Bin) ->
    <<Bin/binary, 56>>;
'e_enum_Term.TermType'('DB_CREATE', Bin) ->
    <<Bin/binary, 57>>;
'e_enum_Term.TermType'('DB_DROP', Bin) ->
    <<Bin/binary, 58>>;
'e_enum_Term.TermType'('DB_LIST', Bin) ->
    <<Bin/binary, 59>>;
'e_enum_Term.TermType'('TABLE_CREATE', Bin) ->
    <<Bin/binary, 60>>;
'e_enum_Term.TermType'('TABLE_DROP', Bin) ->
    <<Bin/binary, 61>>;
'e_enum_Term.TermType'('TABLE_LIST', Bin) ->
    <<Bin/binary, 62>>;
'e_enum_Term.TermType'('CONFIG', Bin) ->
    <<Bin/binary, 174, 1>>;
'e_enum_Term.TermType'('STATUS', Bin) ->
    <<Bin/binary, 175, 1>>;
'e_enum_Term.TermType'('WAIT', Bin) ->
    <<Bin/binary, 177, 1>>;
'e_enum_Term.TermType'('RECONFIGURE', Bin) ->
    <<Bin/binary, 176, 1>>;
'e_enum_Term.TermType'('REBALANCE', Bin) ->
    <<Bin/binary, 179, 1>>;
'e_enum_Term.TermType'('SYNC', Bin) ->
    <<Bin/binary, 138, 1>>;
'e_enum_Term.TermType'('GRANT', Bin) ->
    <<Bin/binary, 188, 1>>;
'e_enum_Term.TermType'('INDEX_CREATE', Bin) ->
    <<Bin/binary, 75>>;
'e_enum_Term.TermType'('INDEX_DROP', Bin) ->
    <<Bin/binary, 76>>;
'e_enum_Term.TermType'('INDEX_LIST', Bin) ->
    <<Bin/binary, 77>>;
'e_enum_Term.TermType'('INDEX_STATUS', Bin) ->
    <<Bin/binary, 139, 1>>;
'e_enum_Term.TermType'('INDEX_WAIT', Bin) ->
    <<Bin/binary, 140, 1>>;
'e_enum_Term.TermType'('INDEX_RENAME', Bin) ->
    <<Bin/binary, 156, 1>>;
'e_enum_Term.TermType'('SET_WRITE_HOOK', Bin) ->
    <<Bin/binary, 189, 1>>;
'e_enum_Term.TermType'('GET_WRITE_HOOK', Bin) ->
    <<Bin/binary, 190, 1>>;
'e_enum_Term.TermType'('FUNCALL', Bin) ->
    <<Bin/binary, 64>>;
'e_enum_Term.TermType'('BRANCH', Bin) ->
    <<Bin/binary, 65>>;
'e_enum_Term.TermType'('OR', Bin) -> <<Bin/binary, 66>>;
'e_enum_Term.TermType'('AND', Bin) ->
    <<Bin/binary, 67>>;
'e_enum_Term.TermType'('FOR_EACH', Bin) ->
    <<Bin/binary, 68>>;
'e_enum_Term.TermType'('FUNC', Bin) ->
    <<Bin/binary, 69>>;
'e_enum_Term.TermType'('ASC', Bin) ->
    <<Bin/binary, 73>>;
'e_enum_Term.TermType'('DESC', Bin) ->
    <<Bin/binary, 74>>;
'e_enum_Term.TermType'('INFO', Bin) ->
    <<Bin/binary, 79>>;
'e_enum_Term.TermType'('MATCH', Bin) ->
    <<Bin/binary, 97>>;
'e_enum_Term.TermType'('UPCASE', Bin) ->
    <<Bin/binary, 141, 1>>;
'e_enum_Term.TermType'('DOWNCASE', Bin) ->
    <<Bin/binary, 142, 1>>;
'e_enum_Term.TermType'('SAMPLE', Bin) ->
    <<Bin/binary, 81>>;
'e_enum_Term.TermType'('DEFAULT', Bin) ->
    <<Bin/binary, 92>>;
'e_enum_Term.TermType'('JSON', Bin) ->
    <<Bin/binary, 98>>;
'e_enum_Term.TermType'('TO_JSON_STRING', Bin) ->
    <<Bin/binary, 172, 1>>;
'e_enum_Term.TermType'('ISO8601', Bin) ->
    <<Bin/binary, 99>>;
'e_enum_Term.TermType'('TO_ISO8601', Bin) ->
    <<Bin/binary, 100>>;
'e_enum_Term.TermType'('EPOCH_TIME', Bin) ->
    <<Bin/binary, 101>>;
'e_enum_Term.TermType'('TO_EPOCH_TIME', Bin) ->
    <<Bin/binary, 102>>;
'e_enum_Term.TermType'('NOW', Bin) ->
    <<Bin/binary, 103>>;
'e_enum_Term.TermType'('IN_TIMEZONE', Bin) ->
    <<Bin/binary, 104>>;
'e_enum_Term.TermType'('DURING', Bin) ->
    <<Bin/binary, 105>>;
'e_enum_Term.TermType'('DATE', Bin) ->
    <<Bin/binary, 106>>;
'e_enum_Term.TermType'('TIME_OF_DAY', Bin) ->
    <<Bin/binary, 126>>;
'e_enum_Term.TermType'('TIMEZONE', Bin) ->
    <<Bin/binary, 127>>;
'e_enum_Term.TermType'('YEAR', Bin) ->
    <<Bin/binary, 128, 1>>;
'e_enum_Term.TermType'('MONTH', Bin) ->
    <<Bin/binary, 129, 1>>;
'e_enum_Term.TermType'('DAY', Bin) ->
    <<Bin/binary, 130, 1>>;
'e_enum_Term.TermType'('DAY_OF_WEEK', Bin) ->
    <<Bin/binary, 131, 1>>;
'e_enum_Term.TermType'('DAY_OF_YEAR', Bin) ->
    <<Bin/binary, 132, 1>>;
'e_enum_Term.TermType'('HOURS', Bin) ->
    <<Bin/binary, 133, 1>>;
'e_enum_Term.TermType'('MINUTES', Bin) ->
    <<Bin/binary, 134, 1>>;
'e_enum_Term.TermType'('SECONDS', Bin) ->
    <<Bin/binary, 135, 1>>;
'e_enum_Term.TermType'('TIME', Bin) ->
    <<Bin/binary, 136, 1>>;
'e_enum_Term.TermType'('MONDAY', Bin) ->
    <<Bin/binary, 107>>;
'e_enum_Term.TermType'('TUESDAY', Bin) ->
    <<Bin/binary, 108>>;
'e_enum_Term.TermType'('WEDNESDAY', Bin) ->
    <<Bin/binary, 109>>;
'e_enum_Term.TermType'('THURSDAY', Bin) ->
    <<Bin/binary, 110>>;
'e_enum_Term.TermType'('FRIDAY', Bin) ->
    <<Bin/binary, 111>>;
'e_enum_Term.TermType'('SATURDAY', Bin) ->
    <<Bin/binary, 112>>;
'e_enum_Term.TermType'('SUNDAY', Bin) ->
    <<Bin/binary, 113>>;
'e_enum_Term.TermType'('JANUARY', Bin) ->
    <<Bin/binary, 114>>;
'e_enum_Term.TermType'('FEBRUARY', Bin) ->
    <<Bin/binary, 115>>;
'e_enum_Term.TermType'('MARCH', Bin) ->
    <<Bin/binary, 116>>;
'e_enum_Term.TermType'('APRIL', Bin) ->
    <<Bin/binary, 117>>;
'e_enum_Term.TermType'('MAY', Bin) ->
    <<Bin/binary, 118>>;
'e_enum_Term.TermType'('JUNE', Bin) ->
    <<Bin/binary, 119>>;
'e_enum_Term.TermType'('JULY', Bin) ->
    <<Bin/binary, 120>>;
'e_enum_Term.TermType'('AUGUST', Bin) ->
    <<Bin/binary, 121>>;
'e_enum_Term.TermType'('SEPTEMBER', Bin) ->
    <<Bin/binary, 122>>;
'e_enum_Term.TermType'('OCTOBER', Bin) ->
    <<Bin/binary, 123>>;
'e_enum_Term.TermType'('NOVEMBER', Bin) ->
    <<Bin/binary, 124>>;
'e_enum_Term.TermType'('DECEMBER', Bin) ->
    <<Bin/binary, 125>>;
'e_enum_Term.TermType'('LITERAL', Bin) ->
    <<Bin/binary, 137, 1>>;
'e_enum_Term.TermType'('GROUP', Bin) ->
    <<Bin/binary, 144, 1>>;
'e_enum_Term.TermType'('SUM', Bin) ->
    <<Bin/binary, 145, 1>>;
'e_enum_Term.TermType'('AVG', Bin) ->
    <<Bin/binary, 146, 1>>;
'e_enum_Term.TermType'('MIN', Bin) ->
    <<Bin/binary, 147, 1>>;
'e_enum_Term.TermType'('MAX', Bin) ->
    <<Bin/binary, 148, 1>>;
'e_enum_Term.TermType'('SPLIT', Bin) ->
    <<Bin/binary, 149, 1>>;
'e_enum_Term.TermType'('UNGROUP', Bin) ->
    <<Bin/binary, 150, 1>>;
'e_enum_Term.TermType'('RANDOM', Bin) ->
    <<Bin/binary, 151, 1>>;
'e_enum_Term.TermType'('CHANGES', Bin) ->
    <<Bin/binary, 152, 1>>;
'e_enum_Term.TermType'('ARGS', Bin) ->
    <<Bin/binary, 154, 1>>;
'e_enum_Term.TermType'('BINARY', Bin) ->
    <<Bin/binary, 155, 1>>;
'e_enum_Term.TermType'('GEOJSON', Bin) ->
    <<Bin/binary, 157, 1>>;
'e_enum_Term.TermType'('TO_GEOJSON', Bin) ->
    <<Bin/binary, 158, 1>>;
'e_enum_Term.TermType'('POINT', Bin) ->
    <<Bin/binary, 159, 1>>;
'e_enum_Term.TermType'('LINE', Bin) ->
    <<Bin/binary, 160, 1>>;
'e_enum_Term.TermType'('POLYGON', Bin) ->
    <<Bin/binary, 161, 1>>;
'e_enum_Term.TermType'('DISTANCE', Bin) ->
    <<Bin/binary, 162, 1>>;
'e_enum_Term.TermType'('INTERSECTS', Bin) ->
    <<Bin/binary, 163, 1>>;
'e_enum_Term.TermType'('INCLUDES', Bin) ->
    <<Bin/binary, 164, 1>>;
'e_enum_Term.TermType'('CIRCLE', Bin) ->
    <<Bin/binary, 165, 1>>;
'e_enum_Term.TermType'('GET_INTERSECTING', Bin) ->
    <<Bin/binary, 166, 1>>;
'e_enum_Term.TermType'('FILL', Bin) ->
    <<Bin/binary, 167, 1>>;
'e_enum_Term.TermType'('GET_NEAREST', Bin) ->
    <<Bin/binary, 168, 1>>;
'e_enum_Term.TermType'('POLYGON_SUB', Bin) ->
    <<Bin/binary, 171, 1>>;
'e_enum_Term.TermType'('MINVAL', Bin) ->
    <<Bin/binary, 180, 1>>;
'e_enum_Term.TermType'('MAXVAL', Bin) ->
    <<Bin/binary, 181, 1>>;
'e_enum_Term.TermType'(V, Bin) -> e_varint(V, Bin).

e_type_int64(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_bool(true, Bin) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin) -> <<Bin/binary, 0>>.

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_type_double(V, Bin) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin) ->
    <<Bin/binary, 0:48, 248, 127>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'VersionDummy' -> d_msg_VersionDummy(Bin, TrUserData);
      'Query.AssocPair' ->
	  'd_msg_Query.AssocPair'(Bin, TrUserData);
      'Query' -> d_msg_Query(Bin, TrUserData);
      'Frame' -> d_msg_Frame(Bin, TrUserData);
      'Backtrace' -> d_msg_Backtrace(Bin, TrUserData);
      'Response' -> d_msg_Response(Bin, TrUserData);
      'Datum.AssocPair' ->
	  'd_msg_Datum.AssocPair'(Bin, TrUserData);
      'Datum' -> d_msg_Datum(Bin, TrUserData);
      'Term.AssocPair' ->
	  'd_msg_Term.AssocPair'(Bin, TrUserData);
      'Term' -> d_msg_Term(Bin, TrUserData)
    end.



d_msg_VersionDummy(Bin, TrUserData) ->
    dfp_read_field_def_VersionDummy(Bin, 0, 0, TrUserData).

dfp_read_field_def_VersionDummy(<<>>, 0, 0, _) ->
    #'VersionDummy'{};
dfp_read_field_def_VersionDummy(Other, Z1, Z2,
				TrUserData) ->
    dg_read_field_def_VersionDummy(Other, Z1, Z2,
				   TrUserData).

dg_read_field_def_VersionDummy(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_VersionDummy(Rest, N + 7,
				   X bsl N + Acc, TrUserData);
dg_read_field_def_VersionDummy(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_VersionDummy(Rest, 0, 0, TrUserData);
      1 -> skip_64_VersionDummy(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_VersionDummy(Rest, 0, 0,
					     TrUserData);
      5 -> skip_32_VersionDummy(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_VersionDummy(<<>>, 0, 0, _) ->
    #'VersionDummy'{}.

skip_varint_VersionDummy(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, TrUserData) ->
    skip_varint_VersionDummy(Rest, Z1, Z2, TrUserData);
skip_varint_VersionDummy(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, TrUserData) ->
    dfp_read_field_def_VersionDummy(Rest, Z1, Z2,
				    TrUserData).


skip_length_delimited_VersionDummy(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_VersionDummy(Rest, N + 7,
				       X bsl N + Acc, TrUserData);
skip_length_delimited_VersionDummy(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_VersionDummy(Rest2, 0, 0,
				    TrUserData).


skip_32_VersionDummy(<<_:32, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_VersionDummy(Rest, Z1, Z2,
				    TrUserData).


skip_64_VersionDummy(<<_:64, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_VersionDummy(Rest, Z1, Z2,
				    TrUserData).


'd_msg_Query.AssocPair'(Bin, TrUserData) ->
    'dfp_read_field_def_Query.AssocPair'(Bin, 0, 0,
					 id(undefined, TrUserData),
					 id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_Query.AssocPair'(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    'd_field_Query.AssocPair_key'(Rest, Z1, Z2, F1, F2,
				  TrUserData);
'dfp_read_field_def_Query.AssocPair'(<<18,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    'd_field_Query.AssocPair_val'(Rest, Z1, Z2, F1, F2,
				  TrUserData);
'dfp_read_field_def_Query.AssocPair'(<<>>, 0, 0, F1, F2,
				     _) ->
    #'Query.AssocPair'{key = F1, val = F2};
'dfp_read_field_def_Query.AssocPair'(Other, Z1, Z2, F1,
				     F2, TrUserData) ->
    'dg_read_field_def_Query.AssocPair'(Other, Z1, Z2, F1,
					F2, TrUserData).

'dg_read_field_def_Query.AssocPair'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_Query.AssocPair'(Rest, N + 7,
					X bsl N + Acc, F1, F2, TrUserData);
'dg_read_field_def_Query.AssocPair'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Query.AssocPair_key'(Rest, 0, 0, F1, F2,
					TrUserData);
      18 ->
	  'd_field_Query.AssocPair_val'(Rest, 0, 0, F1, F2,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Query.AssocPair'(Rest, 0, 0, F1, F2,
					      TrUserData);
	    1 ->
		'skip_64_Query.AssocPair'(Rest, 0, 0, F1, F2,
					  TrUserData);
	    2 ->
		'skip_length_delimited_Query.AssocPair'(Rest, 0, 0, F1,
							F2, TrUserData);
	    5 ->
		'skip_32_Query.AssocPair'(Rest, 0, 0, F1, F2,
					  TrUserData)
	  end
    end;
'dg_read_field_def_Query.AssocPair'(<<>>, 0, 0, F1, F2,
				    _) ->
    #'Query.AssocPair'{key = F1, val = F2}.

'd_field_Query.AssocPair_key'(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    'd_field_Query.AssocPair_key'(Rest, N + 7,
				  X bsl N + Acc, F1, F2, TrUserData);
'd_field_Query.AssocPair_key'(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    'dfp_read_field_def_Query.AssocPair'(Rest2, 0, 0,
					 NewFValue, F2, TrUserData).


'd_field_Query.AssocPair_val'(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    'd_field_Query.AssocPair_val'(Rest, N + 7,
				  X bsl N + Acc, F1, F2, TrUserData);
'd_field_Query.AssocPair_val'(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Term(Bs, TrUserData), TrUserData),
    'dfp_read_field_def_Query.AssocPair'(Rest2, 0, 0, F1,
					 if F2 == undefined -> NewFValue;
					    true ->
						merge_msg_Term(F2, NewFValue,
							       TrUserData)
					 end,
					 TrUserData).


'skip_varint_Query.AssocPair'(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, TrUserData) ->
    'skip_varint_Query.AssocPair'(Rest, Z1, Z2, F1, F2,
				  TrUserData);
'skip_varint_Query.AssocPair'(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, TrUserData) ->
    'dfp_read_field_def_Query.AssocPair'(Rest, Z1, Z2, F1,
					 F2, TrUserData).


'skip_length_delimited_Query.AssocPair'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_Query.AssocPair'(Rest, N + 7,
					    X bsl N + Acc, F1, F2, TrUserData);
'skip_length_delimited_Query.AssocPair'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Query.AssocPair'(Rest2, 0, 0, F1,
					 F2, TrUserData).


'skip_32_Query.AssocPair'(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    'dfp_read_field_def_Query.AssocPair'(Rest, Z1, Z2, F1,
					 F2, TrUserData).


'skip_64_Query.AssocPair'(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    'dfp_read_field_def_Query.AssocPair'(Rest, Z1, Z2, F1,
					 F2, TrUserData).


d_msg_Query(Bin, TrUserData) ->
    dfp_read_field_def_Query(Bin, 0, 0,
			     id(undefined, TrUserData),
			     id(undefined, TrUserData),
			     id(undefined, TrUserData),
			     id(undefined, TrUserData),
			     id(undefined, TrUserData), id([], TrUserData),
			     TrUserData).

dfp_read_field_def_Query(<<8, Rest/binary>>, Z1, Z2, F1,
			 F2, F3, F4, F5, F6, TrUserData) ->
    d_field_Query_type(Rest, Z1, Z2, F1, F2, F3, F4, F5, F6,
		       TrUserData);
dfp_read_field_def_Query(<<18, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_Query_query(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			F6, TrUserData);
dfp_read_field_def_Query(<<24, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_Query_token(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			F6, TrUserData);
dfp_read_field_def_Query(<<32, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_Query_OBSOLETE_noreply(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, TrUserData);
dfp_read_field_def_Query(<<40, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_Query_accepts_r_json(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, TrUserData);
dfp_read_field_def_Query(<<50, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_Query_global_optargs(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, TrUserData);
dfp_read_field_def_Query(<<>>, 0, 0, F1, F2, F3, F4, F5,
			 F6, TrUserData) ->
    #'Query'{type = F1, query = F2, token = F3,
	     'OBSOLETE_noreply' = F4, accepts_r_json = F5,
	     global_optargs = lists_reverse(F6, TrUserData)};
dfp_read_field_def_Query(Other, Z1, Z2, F1, F2, F3, F4,
			 F5, F6, TrUserData) ->
    dg_read_field_def_Query(Other, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, TrUserData).

dg_read_field_def_Query(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Query(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, TrUserData);
dg_read_field_def_Query(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Query_type(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			     TrUserData);
      18 ->
	  d_field_Query_query(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			      TrUserData);
      24 ->
	  d_field_Query_token(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			      TrUserData);
      32 ->
	  d_field_Query_OBSOLETE_noreply(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, TrUserData);
      40 ->
	  d_field_Query_accepts_r_json(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, TrUserData);
      50 ->
	  d_field_Query_global_optargs(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Query(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				  TrUserData);
	    1 ->
		skip_64_Query(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			      TrUserData);
	    2 ->
		skip_length_delimited_Query(Rest, 0, 0, F1, F2, F3, F4,
					    F5, F6, TrUserData);
	    5 ->
		skip_32_Query(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			      TrUserData)
	  end
    end;
dg_read_field_def_Query(<<>>, 0, 0, F1, F2, F3, F4, F5,
			F6, TrUserData) ->
    #'Query'{type = F1, query = F2, token = F3,
	     'OBSOLETE_noreply' = F4, accepts_r_json = F5,
	     global_optargs = lists_reverse(F6, TrUserData)}.

d_field_Query_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_Query_type(Rest, N + 7, X bsl N + Acc, F1, F2,
		       F3, F4, F5, F6, TrUserData);
d_field_Query_type(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		   F2, F3, F4, F5, F6, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_Query.QueryType'(Tmp),
    dfp_read_field_def_Query(Rest, 0, 0, NewFValue, F2, F3,
			     F4, F5, F6, TrUserData).


d_field_Query_query(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_Query_query(Rest, N + 7, X bsl N + Acc, F1, F2,
			F3, F4, F5, F6, TrUserData);
d_field_Query_query(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5, F6, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Term(Bs, TrUserData), TrUserData),
    dfp_read_field_def_Query(Rest2, 0, 0, F1,
			     if F2 == undefined -> NewFValue;
				true ->
				    merge_msg_Term(F2, NewFValue, TrUserData)
			     end,
			     F3, F4, F5, F6, TrUserData).


d_field_Query_token(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_Query_token(Rest, N + 7, X bsl N + Acc, F1, F2,
			F3, F4, F5, F6, TrUserData);
d_field_Query_token(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, _, F4, F5, F6, TrUserData) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_Query(Rest, 0, 0, F1, F2, NewFValue,
			     F4, F5, F6, TrUserData).


d_field_Query_OBSOLETE_noreply(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_Query_OBSOLETE_noreply(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				   TrUserData);
d_field_Query_OBSOLETE_noreply(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, _, F5, F6, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_Query(Rest, 0, 0, F1, F2, F3,
			     NewFValue, F5, F6, TrUserData).


d_field_Query_accepts_r_json(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_Query_accepts_r_json(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, TrUserData);
d_field_Query_accepts_r_json(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, _, F6, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_Query(Rest, 0, 0, F1, F2, F3, F4,
			     NewFValue, F6, TrUserData).


d_field_Query_global_optargs(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_Query_global_optargs(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, TrUserData);
d_field_Query_global_optargs(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id('d_msg_Query.AssocPair'(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Query(Rest2, 0, 0, F1, F2, F3, F4,
			     F5, cons(NewFValue, F6, TrUserData), TrUserData).


skip_varint_Query(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  F2, F3, F4, F5, F6, TrUserData) ->
    skip_varint_Query(Rest, Z1, Z2, F1, F2, F3, F4, F5, F6,
		      TrUserData);
skip_varint_Query(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  F2, F3, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_Query(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, TrUserData).


skip_length_delimited_Query(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    skip_length_delimited_Query(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, TrUserData);
skip_length_delimited_Query(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Query(Rest2, 0, 0, F1, F2, F3, F4,
			     F5, F6, TrUserData).


skip_32_Query(<<_:32, Rest/binary>>, Z1, Z2, F1, F2, F3,
	      F4, F5, F6, TrUserData) ->
    dfp_read_field_def_Query(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, TrUserData).


skip_64_Query(<<_:64, Rest/binary>>, Z1, Z2, F1, F2, F3,
	      F4, F5, F6, TrUserData) ->
    dfp_read_field_def_Query(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, TrUserData).


d_msg_Frame(Bin, TrUserData) ->
    dfp_read_field_def_Frame(Bin, 0, 0,
			     id(undefined, TrUserData),
			     id(undefined, TrUserData),
			     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Frame(<<8, Rest/binary>>, Z1, Z2, F1,
			 F2, F3, TrUserData) ->
    d_field_Frame_type(Rest, Z1, Z2, F1, F2, F3,
		       TrUserData);
dfp_read_field_def_Frame(<<16, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, TrUserData) ->
    d_field_Frame_pos(Rest, Z1, Z2, F1, F2, F3, TrUserData);
dfp_read_field_def_Frame(<<26, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, TrUserData) ->
    d_field_Frame_opt(Rest, Z1, Z2, F1, F2, F3, TrUserData);
dfp_read_field_def_Frame(<<>>, 0, 0, F1, F2, F3, _) ->
    #'Frame'{type = F1, pos = F2, opt = F3};
dfp_read_field_def_Frame(Other, Z1, Z2, F1, F2, F3,
			 TrUserData) ->
    dg_read_field_def_Frame(Other, Z1, Z2, F1, F2, F3,
			    TrUserData).

dg_read_field_def_Frame(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Frame(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, TrUserData);
dg_read_field_def_Frame(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Frame_type(Rest, 0, 0, F1, F2, F3, TrUserData);
      16 ->
	  d_field_Frame_pos(Rest, 0, 0, F1, F2, F3, TrUserData);
      26 ->
	  d_field_Frame_opt(Rest, 0, 0, F1, F2, F3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Frame(Rest, 0, 0, F1, F2, F3, TrUserData);
	    1 -> skip_64_Frame(Rest, 0, 0, F1, F2, F3, TrUserData);
	    2 ->
		skip_length_delimited_Frame(Rest, 0, 0, F1, F2, F3,
					    TrUserData);
	    5 -> skip_32_Frame(Rest, 0, 0, F1, F2, F3, TrUserData)
	  end
    end;
dg_read_field_def_Frame(<<>>, 0, 0, F1, F2, F3, _) ->
    #'Frame'{type = F1, pos = F2, opt = F3}.

d_field_Frame_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_Frame_type(Rest, N + 7, X bsl N + Acc, F1, F2,
		       F3, TrUserData);
d_field_Frame_type(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		   F2, F3, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_Frame.FrameType'(Tmp),
    dfp_read_field_def_Frame(Rest, 0, 0, NewFValue, F2, F3,
			     TrUserData).


d_field_Frame_pos(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, TrUserData)
    when N < 57 ->
    d_field_Frame_pos(Rest, N + 7, X bsl N + Acc, F1, F2,
		      F3, TrUserData);
d_field_Frame_pos(<<0:1, X:7, Rest/binary>>, N, Acc, F1,
		  _, F3, TrUserData) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_Frame(Rest, 0, 0, F1, NewFValue, F3,
			     TrUserData).


d_field_Frame_opt(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, TrUserData)
    when N < 57 ->
    d_field_Frame_opt(Rest, N + 7, X bsl N + Acc, F1, F2,
		      F3, TrUserData);
d_field_Frame_opt(<<0:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Frame(Rest2, 0, 0, F1, F2, NewFValue,
			     TrUserData).


skip_varint_Frame(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  F2, F3, TrUserData) ->
    skip_varint_Frame(Rest, Z1, Z2, F1, F2, F3, TrUserData);
skip_varint_Frame(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  F2, F3, TrUserData) ->
    dfp_read_field_def_Frame(Rest, Z1, Z2, F1, F2, F3,
			     TrUserData).


skip_length_delimited_Frame(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_Frame(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, TrUserData);
skip_length_delimited_Frame(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Frame(Rest2, 0, 0, F1, F2, F3,
			     TrUserData).


skip_32_Frame(<<_:32, Rest/binary>>, Z1, Z2, F1, F2, F3,
	      TrUserData) ->
    dfp_read_field_def_Frame(Rest, Z1, Z2, F1, F2, F3,
			     TrUserData).


skip_64_Frame(<<_:64, Rest/binary>>, Z1, Z2, F1, F2, F3,
	      TrUserData) ->
    dfp_read_field_def_Frame(Rest, Z1, Z2, F1, F2, F3,
			     TrUserData).


d_msg_Backtrace(Bin, TrUserData) ->
    dfp_read_field_def_Backtrace(Bin, 0, 0,
				 id([], TrUserData), TrUserData).

dfp_read_field_def_Backtrace(<<10, Rest/binary>>, Z1,
			     Z2, F1, TrUserData) ->
    d_field_Backtrace_frames(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_Backtrace(<<>>, 0, 0, F1,
			     TrUserData) ->
    #'Backtrace'{frames = lists_reverse(F1, TrUserData)};
dfp_read_field_def_Backtrace(Other, Z1, Z2, F1,
			     TrUserData) ->
    dg_read_field_def_Backtrace(Other, Z1, Z2, F1,
				TrUserData).

dg_read_field_def_Backtrace(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Backtrace(Rest, N + 7, X bsl N + Acc,
				F1, TrUserData);
dg_read_field_def_Backtrace(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Backtrace_frames(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Backtrace(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_Backtrace(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_Backtrace(Rest, 0, 0, F1,
						TrUserData);
	    5 -> skip_32_Backtrace(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_Backtrace(<<>>, 0, 0, F1,
			    TrUserData) ->
    #'Backtrace'{frames = lists_reverse(F1, TrUserData)}.

d_field_Backtrace_frames(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, TrUserData)
    when N < 57 ->
    d_field_Backtrace_frames(Rest, N + 7, X bsl N + Acc, F1,
			     TrUserData);
d_field_Backtrace_frames(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Frame(Bs, TrUserData), TrUserData),
    dfp_read_field_def_Backtrace(Rest2, 0, 0,
				 cons(NewFValue, F1, TrUserData), TrUserData).


skip_varint_Backtrace(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, TrUserData) ->
    skip_varint_Backtrace(Rest, Z1, Z2, F1, TrUserData);
skip_varint_Backtrace(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, TrUserData) ->
    dfp_read_field_def_Backtrace(Rest, Z1, Z2, F1,
				 TrUserData).


skip_length_delimited_Backtrace(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Backtrace(Rest, N + 7,
				    X bsl N + Acc, F1, TrUserData);
skip_length_delimited_Backtrace(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Backtrace(Rest2, 0, 0, F1,
				 TrUserData).


skip_32_Backtrace(<<_:32, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    dfp_read_field_def_Backtrace(Rest, Z1, Z2, F1,
				 TrUserData).


skip_64_Backtrace(<<_:64, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    dfp_read_field_def_Backtrace(Rest, Z1, Z2, F1,
				 TrUserData).


d_msg_Response(Bin, TrUserData) ->
    dfp_read_field_def_Response(Bin, 0, 0,
				id(undefined, TrUserData),
				id(undefined, TrUserData), id([], TrUserData),
				id(undefined, TrUserData), id([], TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Response(<<8, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_Response_type(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7, TrUserData);
dfp_read_field_def_Response(<<56, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_Response_error_type(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, TrUserData);
dfp_read_field_def_Response(<<48, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_Response_notes(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, TrUserData);
dfp_read_field_def_Response(<<16, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_Response_token(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, TrUserData);
dfp_read_field_def_Response(<<26, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_Response_response(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, TrUserData);
dfp_read_field_def_Response(<<34, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_Response_backtrace(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, TrUserData);
dfp_read_field_def_Response(<<42, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_Response_profile(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, TrUserData);
dfp_read_field_def_Response(<<>>, 0, 0, F1, F2, F3, F4,
			    F5, F6, F7, TrUserData) ->
    #'Response'{type = F1, error_type = F2,
		notes = lists_reverse(F3, TrUserData), token = F4,
		response = lists_reverse(F5, TrUserData),
		backtrace = F6, profile = F7};
dfp_read_field_def_Response(Other, Z1, Z2, F1, F2, F3,
			    F4, F5, F6, F7, TrUserData) ->
    dg_read_field_def_Response(Other, Z1, Z2, F1, F2, F3,
			       F4, F5, F6, F7, TrUserData).

dg_read_field_def_Response(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Response(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, TrUserData);
dg_read_field_def_Response(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Response_type(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6, F7, TrUserData);
      56 ->
	  d_field_Response_error_type(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, TrUserData);
      48 ->
	  d_field_Response_notes(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, TrUserData);
      16 ->
	  d_field_Response_token(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, TrUserData);
      26 ->
	  d_field_Response_response(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, TrUserData);
      34 ->
	  d_field_Response_backtrace(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, TrUserData);
      42 ->
	  d_field_Response_profile(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Response(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				     F7, TrUserData);
	    1 ->
		skip_64_Response(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7,
				 TrUserData);
	    2 ->
		skip_length_delimited_Response(Rest, 0, 0, F1, F2, F3,
					       F4, F5, F6, F7, TrUserData);
	    5 ->
		skip_32_Response(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7,
				 TrUserData)
	  end
    end;
dg_read_field_def_Response(<<>>, 0, 0, F1, F2, F3, F4,
			   F5, F6, F7, TrUserData) ->
    #'Response'{type = F1, error_type = F2,
		notes = lists_reverse(F3, TrUserData), token = F4,
		response = lists_reverse(F5, TrUserData),
		backtrace = F6, profile = F7}.

d_field_Response_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_Response_type(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6, F7, TrUserData);
d_field_Response_type(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F2, F3, F4, F5, F6, F7, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_Response.ResponseType'(Tmp),
    dfp_read_field_def_Response(Rest, 0, 0, NewFValue, F2,
				F3, F4, F5, F6, F7, TrUserData).


d_field_Response_error_type(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_Response_error_type(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, TrUserData);
d_field_Response_error_type(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, _, F3, F4, F5, F6, F7, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_Response.ErrorType'(Tmp),
    dfp_read_field_def_Response(Rest, 0, 0, F1, NewFValue,
				F3, F4, F5, F6, F7, TrUserData).


d_field_Response_notes(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_Response_notes(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, TrUserData);
d_field_Response_notes(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_Response.ResponseNote'(Tmp),
    dfp_read_field_def_Response(Rest, 0, 0, F1, F2,
				cons(NewFValue, F3, TrUserData), F4, F5, F6, F7,
				TrUserData).


d_field_Response_token(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_Response_token(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, TrUserData);
d_field_Response_token(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, _, F5, F6, F7, TrUserData) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_Response(Rest, 0, 0, F1, F2, F3,
				NewFValue, F5, F6, F7, TrUserData).


d_field_Response_response(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_Response_response(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, TrUserData);
d_field_Response_response(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Datum(Bs, TrUserData), TrUserData),
    dfp_read_field_def_Response(Rest2, 0, 0, F1, F2, F3, F4,
				cons(NewFValue, F5, TrUserData), F6, F7,
				TrUserData).


d_field_Response_backtrace(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_Response_backtrace(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, TrUserData);
d_field_Response_backtrace(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Backtrace(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Response(Rest2, 0, 0, F1, F2, F3, F4,
				F5,
				if F6 == undefined -> NewFValue;
				   true ->
				       merge_msg_Backtrace(F6, NewFValue,
							   TrUserData)
				end,
				F7, TrUserData).


d_field_Response_profile(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_Response_profile(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, TrUserData);
d_field_Response_profile(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Datum(Bs, TrUserData), TrUserData),
    dfp_read_field_def_Response(Rest2, 0, 0, F1, F2, F3, F4,
				F5, F6,
				if F7 == undefined -> NewFValue;
				   true ->
				       merge_msg_Datum(F7, NewFValue,
						       TrUserData)
				end,
				TrUserData).


skip_varint_Response(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    skip_varint_Response(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			 F6, F7, TrUserData);
skip_varint_Response(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    dfp_read_field_def_Response(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, TrUserData).


skip_length_delimited_Response(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    skip_length_delimited_Response(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   TrUserData);
skip_length_delimited_Response(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7,
			       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Response(Rest2, 0, 0, F1, F2, F3, F4,
				F5, F6, F7, TrUserData).


skip_32_Response(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		 F3, F4, F5, F6, F7, TrUserData) ->
    dfp_read_field_def_Response(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, TrUserData).


skip_64_Response(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		 F3, F4, F5, F6, F7, TrUserData) ->
    dfp_read_field_def_Response(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, TrUserData).


'd_msg_Datum.AssocPair'(Bin, TrUserData) ->
    'dfp_read_field_def_Datum.AssocPair'(Bin, 0, 0,
					 id(undefined, TrUserData),
					 id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_Datum.AssocPair'(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    'd_field_Datum.AssocPair_key'(Rest, Z1, Z2, F1, F2,
				  TrUserData);
'dfp_read_field_def_Datum.AssocPair'(<<18,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    'd_field_Datum.AssocPair_val'(Rest, Z1, Z2, F1, F2,
				  TrUserData);
'dfp_read_field_def_Datum.AssocPair'(<<>>, 0, 0, F1, F2,
				     _) ->
    #'Datum.AssocPair'{key = F1, val = F2};
'dfp_read_field_def_Datum.AssocPair'(Other, Z1, Z2, F1,
				     F2, TrUserData) ->
    'dg_read_field_def_Datum.AssocPair'(Other, Z1, Z2, F1,
					F2, TrUserData).

'dg_read_field_def_Datum.AssocPair'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_Datum.AssocPair'(Rest, N + 7,
					X bsl N + Acc, F1, F2, TrUserData);
'dg_read_field_def_Datum.AssocPair'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Datum.AssocPair_key'(Rest, 0, 0, F1, F2,
					TrUserData);
      18 ->
	  'd_field_Datum.AssocPair_val'(Rest, 0, 0, F1, F2,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Datum.AssocPair'(Rest, 0, 0, F1, F2,
					      TrUserData);
	    1 ->
		'skip_64_Datum.AssocPair'(Rest, 0, 0, F1, F2,
					  TrUserData);
	    2 ->
		'skip_length_delimited_Datum.AssocPair'(Rest, 0, 0, F1,
							F2, TrUserData);
	    5 ->
		'skip_32_Datum.AssocPair'(Rest, 0, 0, F1, F2,
					  TrUserData)
	  end
    end;
'dg_read_field_def_Datum.AssocPair'(<<>>, 0, 0, F1, F2,
				    _) ->
    #'Datum.AssocPair'{key = F1, val = F2}.

'd_field_Datum.AssocPair_key'(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    'd_field_Datum.AssocPair_key'(Rest, N + 7,
				  X bsl N + Acc, F1, F2, TrUserData);
'd_field_Datum.AssocPair_key'(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    'dfp_read_field_def_Datum.AssocPair'(Rest2, 0, 0,
					 NewFValue, F2, TrUserData).


'd_field_Datum.AssocPair_val'(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    'd_field_Datum.AssocPair_val'(Rest, N + 7,
				  X bsl N + Acc, F1, F2, TrUserData);
'd_field_Datum.AssocPair_val'(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Datum(Bs, TrUserData), TrUserData),
    'dfp_read_field_def_Datum.AssocPair'(Rest2, 0, 0, F1,
					 if F2 == undefined -> NewFValue;
					    true ->
						merge_msg_Datum(F2, NewFValue,
								TrUserData)
					 end,
					 TrUserData).


'skip_varint_Datum.AssocPair'(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, TrUserData) ->
    'skip_varint_Datum.AssocPair'(Rest, Z1, Z2, F1, F2,
				  TrUserData);
'skip_varint_Datum.AssocPair'(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, TrUserData) ->
    'dfp_read_field_def_Datum.AssocPair'(Rest, Z1, Z2, F1,
					 F2, TrUserData).


'skip_length_delimited_Datum.AssocPair'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_Datum.AssocPair'(Rest, N + 7,
					    X bsl N + Acc, F1, F2, TrUserData);
'skip_length_delimited_Datum.AssocPair'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Datum.AssocPair'(Rest2, 0, 0, F1,
					 F2, TrUserData).


'skip_32_Datum.AssocPair'(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    'dfp_read_field_def_Datum.AssocPair'(Rest, Z1, Z2, F1,
					 F2, TrUserData).


'skip_64_Datum.AssocPair'(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    'dfp_read_field_def_Datum.AssocPair'(Rest, Z1, Z2, F1,
					 F2, TrUserData).


d_msg_Datum(Bin, TrUserData) ->
    dfp_read_field_def_Datum(Bin, 0, 0,
			     id(undefined, TrUserData),
			     id(undefined, TrUserData),
			     id(undefined, TrUserData),
			     id(undefined, TrUserData), id([], TrUserData),
			     id([], TrUserData), TrUserData).

dfp_read_field_def_Datum(<<8, Rest/binary>>, Z1, Z2, F1,
			 F2, F3, F4, F5, F6, TrUserData) ->
    d_field_Datum_type(Rest, Z1, Z2, F1, F2, F3, F4, F5, F6,
		       TrUserData);
dfp_read_field_def_Datum(<<16, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_Datum_r_bool(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			 F6, TrUserData);
dfp_read_field_def_Datum(<<25, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_Datum_r_num(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			F6, TrUserData);
dfp_read_field_def_Datum(<<34, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_Datum_r_str(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			F6, TrUserData);
dfp_read_field_def_Datum(<<42, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_Datum_r_array(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, TrUserData);
dfp_read_field_def_Datum(<<50, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_Datum_r_object(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, TrUserData);
dfp_read_field_def_Datum(<<>>, 0, 0, F1, F2, F3, F4, F5,
			 F6, TrUserData) ->
    #'Datum'{type = F1, r_bool = F2, r_num = F3, r_str = F4,
	     r_array = lists_reverse(F5, TrUserData),
	     r_object = lists_reverse(F6, TrUserData)};
dfp_read_field_def_Datum(Other, Z1, Z2, F1, F2, F3, F4,
			 F5, F6, TrUserData) ->
    dg_read_field_def_Datum(Other, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, TrUserData).

dg_read_field_def_Datum(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Datum(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, TrUserData);
dg_read_field_def_Datum(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Datum_type(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			     TrUserData);
      16 ->
	  d_field_Datum_r_bool(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			       TrUserData);
      25 ->
	  d_field_Datum_r_num(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			      TrUserData);
      34 ->
	  d_field_Datum_r_str(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			      TrUserData);
      42 ->
	  d_field_Datum_r_array(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6, TrUserData);
      50 ->
	  d_field_Datum_r_object(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Datum(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				  TrUserData);
	    1 ->
		skip_64_Datum(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			      TrUserData);
	    2 ->
		skip_length_delimited_Datum(Rest, 0, 0, F1, F2, F3, F4,
					    F5, F6, TrUserData);
	    5 ->
		skip_32_Datum(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			      TrUserData)
	  end
    end;
dg_read_field_def_Datum(<<>>, 0, 0, F1, F2, F3, F4, F5,
			F6, TrUserData) ->
    #'Datum'{type = F1, r_bool = F2, r_num = F3, r_str = F4,
	     r_array = lists_reverse(F5, TrUserData),
	     r_object = lists_reverse(F6, TrUserData)}.

d_field_Datum_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_Datum_type(Rest, N + 7, X bsl N + Acc, F1, F2,
		       F3, F4, F5, F6, TrUserData);
d_field_Datum_type(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		   F2, F3, F4, F5, F6, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_Datum.DatumType'(Tmp),
    dfp_read_field_def_Datum(Rest, 0, 0, NewFValue, F2, F3,
			     F4, F5, F6, TrUserData).


d_field_Datum_r_bool(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_Datum_r_bool(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4, F5, F6, TrUserData);
d_field_Datum_r_bool(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, _, F3, F4, F5, F6, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_Datum(Rest, 0, 0, F1, NewFValue, F3,
			     F4, F5, F6, TrUserData).


d_field_Datum_r_num(<<0:48, 240, 127, Rest/binary>>, Z1,
		    Z2, F1, F2, _, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_Datum(Rest, Z1, Z2, F1, F2, infinity,
			     F4, F5, F6, TrUserData);
d_field_Datum_r_num(<<0:48, 240, 255, Rest/binary>>, Z1,
		    Z2, F1, F2, _, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_Datum(Rest, Z1, Z2, F1, F2,
			     '-infinity', F4, F5, F6, TrUserData);
d_field_Datum_r_num(<<_:48, 15:4, _:4, _:1, 127:7,
		      Rest/binary>>,
		    Z1, Z2, F1, F2, _, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_Datum(Rest, Z1, Z2, F1, F2, nan, F4,
			     F5, F6, TrUserData);
d_field_Datum_r_num(<<Value:64/little-float,
		      Rest/binary>>,
		    Z1, Z2, F1, F2, _, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_Datum(Rest, Z1, Z2, F1, F2, Value,
			     F4, F5, F6, TrUserData).


d_field_Datum_r_str(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_Datum_r_str(Rest, N + 7, X bsl N + Acc, F1, F2,
			F3, F4, F5, F6, TrUserData);
d_field_Datum_r_str(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, _, F5, F6, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Datum(Rest2, 0, 0, F1, F2, F3,
			     NewFValue, F5, F6, TrUserData).


d_field_Datum_r_array(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_Datum_r_array(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6, TrUserData);
d_field_Datum_r_array(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Datum(Bs, TrUserData), TrUserData),
    dfp_read_field_def_Datum(Rest2, 0, 0, F1, F2, F3, F4,
			     cons(NewFValue, F5, TrUserData), F6, TrUserData).


d_field_Datum_r_object(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_Datum_r_object(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, TrUserData);
d_field_Datum_r_object(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id('d_msg_Datum.AssocPair'(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Datum(Rest2, 0, 0, F1, F2, F3, F4,
			     F5, cons(NewFValue, F6, TrUserData), TrUserData).


skip_varint_Datum(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  F2, F3, F4, F5, F6, TrUserData) ->
    skip_varint_Datum(Rest, Z1, Z2, F1, F2, F3, F4, F5, F6,
		      TrUserData);
skip_varint_Datum(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  F2, F3, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_Datum(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, TrUserData).


skip_length_delimited_Datum(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    skip_length_delimited_Datum(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, TrUserData);
skip_length_delimited_Datum(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Datum(Rest2, 0, 0, F1, F2, F3, F4,
			     F5, F6, TrUserData).


skip_32_Datum(<<_:32, Rest/binary>>, Z1, Z2, F1, F2, F3,
	      F4, F5, F6, TrUserData) ->
    dfp_read_field_def_Datum(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, TrUserData).


skip_64_Datum(<<_:64, Rest/binary>>, Z1, Z2, F1, F2, F3,
	      F4, F5, F6, TrUserData) ->
    dfp_read_field_def_Datum(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, TrUserData).


'd_msg_Term.AssocPair'(Bin, TrUserData) ->
    'dfp_read_field_def_Term.AssocPair'(Bin, 0, 0,
					id(undefined, TrUserData),
					id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_Term.AssocPair'(<<10, Rest/binary>>,
				    Z1, Z2, F1, F2, TrUserData) ->
    'd_field_Term.AssocPair_key'(Rest, Z1, Z2, F1, F2,
				 TrUserData);
'dfp_read_field_def_Term.AssocPair'(<<18, Rest/binary>>,
				    Z1, Z2, F1, F2, TrUserData) ->
    'd_field_Term.AssocPair_val'(Rest, Z1, Z2, F1, F2,
				 TrUserData);
'dfp_read_field_def_Term.AssocPair'(<<>>, 0, 0, F1, F2,
				    _) ->
    #'Term.AssocPair'{key = F1, val = F2};
'dfp_read_field_def_Term.AssocPair'(Other, Z1, Z2, F1,
				    F2, TrUserData) ->
    'dg_read_field_def_Term.AssocPair'(Other, Z1, Z2, F1,
				       F2, TrUserData).

'dg_read_field_def_Term.AssocPair'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_Term.AssocPair'(Rest, N + 7,
				       X bsl N + Acc, F1, F2, TrUserData);
'dg_read_field_def_Term.AssocPair'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Term.AssocPair_key'(Rest, 0, 0, F1, F2,
				       TrUserData);
      18 ->
	  'd_field_Term.AssocPair_val'(Rest, 0, 0, F1, F2,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Term.AssocPair'(Rest, 0, 0, F1, F2,
					     TrUserData);
	    1 ->
		'skip_64_Term.AssocPair'(Rest, 0, 0, F1, F2,
					 TrUserData);
	    2 ->
		'skip_length_delimited_Term.AssocPair'(Rest, 0, 0, F1,
						       F2, TrUserData);
	    5 ->
		'skip_32_Term.AssocPair'(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
'dg_read_field_def_Term.AssocPair'(<<>>, 0, 0, F1, F2,
				   _) ->
    #'Term.AssocPair'{key = F1, val = F2}.

'd_field_Term.AssocPair_key'(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    'd_field_Term.AssocPair_key'(Rest, N + 7, X bsl N + Acc,
				 F1, F2, TrUserData);
'd_field_Term.AssocPair_key'(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    'dfp_read_field_def_Term.AssocPair'(Rest2, 0, 0,
					NewFValue, F2, TrUserData).


'd_field_Term.AssocPair_val'(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    'd_field_Term.AssocPair_val'(Rest, N + 7, X bsl N + Acc,
				 F1, F2, TrUserData);
'd_field_Term.AssocPair_val'(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Term(Bs, TrUserData), TrUserData),
    'dfp_read_field_def_Term.AssocPair'(Rest2, 0, 0, F1,
					if F2 == undefined -> NewFValue;
					   true ->
					       merge_msg_Term(F2, NewFValue,
							      TrUserData)
					end,
					TrUserData).


'skip_varint_Term.AssocPair'(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, TrUserData) ->
    'skip_varint_Term.AssocPair'(Rest, Z1, Z2, F1, F2,
				 TrUserData);
'skip_varint_Term.AssocPair'(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, TrUserData) ->
    'dfp_read_field_def_Term.AssocPair'(Rest, Z1, Z2, F1,
					F2, TrUserData).


'skip_length_delimited_Term.AssocPair'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_Term.AssocPair'(Rest, N + 7,
					   X bsl N + Acc, F1, F2, TrUserData);
'skip_length_delimited_Term.AssocPair'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Term.AssocPair'(Rest2, 0, 0, F1, F2,
					TrUserData).


'skip_32_Term.AssocPair'(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, F2, TrUserData) ->
    'dfp_read_field_def_Term.AssocPair'(Rest, Z1, Z2, F1,
					F2, TrUserData).


'skip_64_Term.AssocPair'(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, F2, TrUserData) ->
    'dfp_read_field_def_Term.AssocPair'(Rest, Z1, Z2, F1,
					F2, TrUserData).


d_msg_Term(Bin, TrUserData) ->
    dfp_read_field_def_Term(Bin, 0, 0,
			    id(undefined, TrUserData),
			    id(undefined, TrUserData), id([], TrUserData),
			    id([], TrUserData), TrUserData).

dfp_read_field_def_Term(<<8, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, TrUserData) ->
    d_field_Term_type(Rest, Z1, Z2, F1, F2, F3, F4,
		      TrUserData);
dfp_read_field_def_Term(<<18, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, TrUserData) ->
    d_field_Term_datum(Rest, Z1, Z2, F1, F2, F3, F4,
		       TrUserData);
dfp_read_field_def_Term(<<26, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, TrUserData) ->
    d_field_Term_args(Rest, Z1, Z2, F1, F2, F3, F4,
		      TrUserData);
dfp_read_field_def_Term(<<34, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, TrUserData) ->
    d_field_Term_optargs(Rest, Z1, Z2, F1, F2, F3, F4,
			 TrUserData);
dfp_read_field_def_Term(<<>>, 0, 0, F1, F2, F3, F4,
			TrUserData) ->
    #'Term'{type = F1, datum = F2,
	    args = lists_reverse(F3, TrUserData),
	    optargs = lists_reverse(F4, TrUserData)};
dfp_read_field_def_Term(Other, Z1, Z2, F1, F2, F3, F4,
			TrUserData) ->
    dg_read_field_def_Term(Other, Z1, Z2, F1, F2, F3, F4,
			   TrUserData).

dg_read_field_def_Term(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Term(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, TrUserData);
dg_read_field_def_Term(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Term_type(Rest, 0, 0, F1, F2, F3, F4,
			    TrUserData);
      18 ->
	  d_field_Term_datum(Rest, 0, 0, F1, F2, F3, F4,
			     TrUserData);
      26 ->
	  d_field_Term_args(Rest, 0, 0, F1, F2, F3, F4,
			    TrUserData);
      34 ->
	  d_field_Term_optargs(Rest, 0, 0, F1, F2, F3, F4,
			       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Term(Rest, 0, 0, F1, F2, F3, F4,
				 TrUserData);
	    1 ->
		skip_64_Term(Rest, 0, 0, F1, F2, F3, F4, TrUserData);
	    2 ->
		skip_length_delimited_Term(Rest, 0, 0, F1, F2, F3, F4,
					   TrUserData);
	    5 ->
		skip_32_Term(Rest, 0, 0, F1, F2, F3, F4, TrUserData)
	  end
    end;
dg_read_field_def_Term(<<>>, 0, 0, F1, F2, F3, F4,
		       TrUserData) ->
    #'Term'{type = F1, datum = F2,
	    args = lists_reverse(F3, TrUserData),
	    optargs = lists_reverse(F4, TrUserData)}.

d_field_Term_type(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_Term_type(Rest, N + 7, X bsl N + Acc, F1, F2,
		      F3, F4, TrUserData);
d_field_Term_type(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		  F2, F3, F4, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_Term.TermType'(Tmp),
    dfp_read_field_def_Term(Rest, 0, 0, NewFValue, F2, F3,
			    F4, TrUserData).


d_field_Term_datum(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_Term_datum(Rest, N + 7, X bsl N + Acc, F1, F2,
		       F3, F4, TrUserData);
d_field_Term_datum(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Datum(Bs, TrUserData), TrUserData),
    dfp_read_field_def_Term(Rest2, 0, 0, F1,
			    if F2 == undefined -> NewFValue;
			       true ->
				   merge_msg_Datum(F2, NewFValue, TrUserData)
			    end,
			    F3, F4, TrUserData).


d_field_Term_args(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_Term_args(Rest, N + 7, X bsl N + Acc, F1, F2,
		      F3, F4, TrUserData);
d_field_Term_args(<<0:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Term(Bs, TrUserData), TrUserData),
    dfp_read_field_def_Term(Rest2, 0, 0, F1, F2,
			    cons(NewFValue, F3, TrUserData), F4, TrUserData).


d_field_Term_optargs(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_Term_optargs(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4, TrUserData);
d_field_Term_optargs(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id('d_msg_Term.AssocPair'(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Term(Rest2, 0, 0, F1, F2, F3,
			    cons(NewFValue, F4, TrUserData), TrUserData).


skip_varint_Term(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 F2, F3, F4, TrUserData) ->
    skip_varint_Term(Rest, Z1, Z2, F1, F2, F3, F4,
		     TrUserData);
skip_varint_Term(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 F2, F3, F4, TrUserData) ->
    dfp_read_field_def_Term(Rest, Z1, Z2, F1, F2, F3, F4,
			    TrUserData).


skip_length_delimited_Term(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    skip_length_delimited_Term(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, TrUserData);
skip_length_delimited_Term(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Term(Rest2, 0, 0, F1, F2, F3, F4,
			    TrUserData).


skip_32_Term(<<_:32, Rest/binary>>, Z1, Z2, F1, F2, F3,
	     F4, TrUserData) ->
    dfp_read_field_def_Term(Rest, Z1, Z2, F1, F2, F3, F4,
			    TrUserData).


skip_64_Term(<<_:64, Rest/binary>>, Z1, Z2, F1, F2, F3,
	     F4, TrUserData) ->
    dfp_read_field_def_Term(Rest, Z1, Z2, F1, F2, F3, F4,
			    TrUserData).




'd_enum_Query.QueryType'(1) -> 'START';
'd_enum_Query.QueryType'(2) -> 'CONTINUE';
'd_enum_Query.QueryType'(3) -> 'STOP';
'd_enum_Query.QueryType'(4) -> 'NOREPLY_WAIT';
'd_enum_Query.QueryType'(5) -> 'SERVER_INFO';
'd_enum_Query.QueryType'(V) -> V.

'd_enum_Frame.FrameType'(1) -> 'POS';
'd_enum_Frame.FrameType'(2) -> 'OPT';
'd_enum_Frame.FrameType'(V) -> V.

'd_enum_Response.ResponseType'(1) -> 'SUCCESS_ATOM';
'd_enum_Response.ResponseType'(2) -> 'SUCCESS_SEQUENCE';
'd_enum_Response.ResponseType'(3) -> 'SUCCESS_PARTIAL';
'd_enum_Response.ResponseType'(4) -> 'WAIT_COMPLETE';
'd_enum_Response.ResponseType'(5) -> 'SERVER_INFO';
'd_enum_Response.ResponseType'(16) -> 'CLIENT_ERROR';
'd_enum_Response.ResponseType'(17) -> 'COMPILE_ERROR';
'd_enum_Response.ResponseType'(18) -> 'RUNTIME_ERROR';
'd_enum_Response.ResponseType'(V) -> V.

'd_enum_Response.ErrorType'(1000000) -> 'INTERNAL';
'd_enum_Response.ErrorType'(2000000) ->
    'RESOURCE_LIMIT';
'd_enum_Response.ErrorType'(3000000) -> 'QUERY_LOGIC';
'd_enum_Response.ErrorType'(3100000) -> 'NON_EXISTENCE';
'd_enum_Response.ErrorType'(4100000) -> 'OP_FAILED';
'd_enum_Response.ErrorType'(4200000) ->
    'OP_INDETERMINATE';
'd_enum_Response.ErrorType'(5000000) -> 'USER';
'd_enum_Response.ErrorType'(6000000) ->
    'PERMISSION_ERROR';
'd_enum_Response.ErrorType'(V) -> V.

'd_enum_Response.ResponseNote'(1) -> 'SEQUENCE_FEED';
'd_enum_Response.ResponseNote'(2) -> 'ATOM_FEED';
'd_enum_Response.ResponseNote'(3) ->
    'ORDER_BY_LIMIT_FEED';
'd_enum_Response.ResponseNote'(4) -> 'UNIONED_FEED';
'd_enum_Response.ResponseNote'(5) -> 'INCLUDES_STATES';
'd_enum_Response.ResponseNote'(V) -> V.

'd_enum_Datum.DatumType'(1) -> 'R_NULL';
'd_enum_Datum.DatumType'(2) -> 'R_BOOL';
'd_enum_Datum.DatumType'(3) -> 'R_NUM';
'd_enum_Datum.DatumType'(4) -> 'R_STR';
'd_enum_Datum.DatumType'(5) -> 'R_ARRAY';
'd_enum_Datum.DatumType'(6) -> 'R_OBJECT';
'd_enum_Datum.DatumType'(7) -> 'R_JSON';
'd_enum_Datum.DatumType'(V) -> V.

'd_enum_Term.TermType'(1) -> 'DATUM';
'd_enum_Term.TermType'(2) -> 'MAKE_ARRAY';
'd_enum_Term.TermType'(3) -> 'MAKE_OBJ';
'd_enum_Term.TermType'(10) -> 'VAR';
'd_enum_Term.TermType'(11) -> 'JAVASCRIPT';
'd_enum_Term.TermType'(169) -> 'UUID';
'd_enum_Term.TermType'(153) -> 'HTTP';
'd_enum_Term.TermType'(12) -> 'ERROR';
'd_enum_Term.TermType'(13) -> 'IMPLICIT_VAR';
'd_enum_Term.TermType'(14) -> 'DB';
'd_enum_Term.TermType'(15) -> 'TABLE';
'd_enum_Term.TermType'(16) -> 'GET';
'd_enum_Term.TermType'(78) -> 'GET_ALL';
'd_enum_Term.TermType'(17) -> 'EQ';
'd_enum_Term.TermType'(18) -> 'NE';
'd_enum_Term.TermType'(19) -> 'LT';
'd_enum_Term.TermType'(20) -> 'LE';
'd_enum_Term.TermType'(21) -> 'GT';
'd_enum_Term.TermType'(22) -> 'GE';
'd_enum_Term.TermType'(23) -> 'NOT';
'd_enum_Term.TermType'(24) -> 'ADD';
'd_enum_Term.TermType'(25) -> 'SUB';
'd_enum_Term.TermType'(26) -> 'MUL';
'd_enum_Term.TermType'(27) -> 'DIV';
'd_enum_Term.TermType'(28) -> 'MOD';
'd_enum_Term.TermType'(183) -> 'FLOOR';
'd_enum_Term.TermType'(184) -> 'CEIL';
'd_enum_Term.TermType'(185) -> 'ROUND';
'd_enum_Term.TermType'(29) -> 'APPEND';
'd_enum_Term.TermType'(80) -> 'PREPEND';
'd_enum_Term.TermType'(95) -> 'DIFFERENCE';
'd_enum_Term.TermType'(88) -> 'SET_INSERT';
'd_enum_Term.TermType'(89) -> 'SET_INTERSECTION';
'd_enum_Term.TermType'(90) -> 'SET_UNION';
'd_enum_Term.TermType'(91) -> 'SET_DIFFERENCE';
'd_enum_Term.TermType'(30) -> 'SLICE';
'd_enum_Term.TermType'(70) -> 'SKIP';
'd_enum_Term.TermType'(71) -> 'LIMIT';
'd_enum_Term.TermType'(87) -> 'OFFSETS_OF';
'd_enum_Term.TermType'(93) -> 'CONTAINS';
'd_enum_Term.TermType'(31) -> 'GET_FIELD';
'd_enum_Term.TermType'(94) -> 'KEYS';
'd_enum_Term.TermType'(186) -> 'VALUES';
'd_enum_Term.TermType'(143) -> 'OBJECT';
'd_enum_Term.TermType'(32) -> 'HAS_FIELDS';
'd_enum_Term.TermType'(96) -> 'WITH_FIELDS';
'd_enum_Term.TermType'(33) -> 'PLUCK';
'd_enum_Term.TermType'(34) -> 'WITHOUT';
'd_enum_Term.TermType'(35) -> 'MERGE';
'd_enum_Term.TermType'(36) -> 'BETWEEN_DEPRECATED';
'd_enum_Term.TermType'(182) -> 'BETWEEN';
'd_enum_Term.TermType'(37) -> 'REDUCE';
'd_enum_Term.TermType'(38) -> 'MAP';
'd_enum_Term.TermType'(187) -> 'FOLD';
'd_enum_Term.TermType'(39) -> 'FILTER';
'd_enum_Term.TermType'(40) -> 'CONCAT_MAP';
'd_enum_Term.TermType'(41) -> 'ORDER_BY';
'd_enum_Term.TermType'(42) -> 'DISTINCT';
'd_enum_Term.TermType'(43) -> 'COUNT';
'd_enum_Term.TermType'(86) -> 'IS_EMPTY';
'd_enum_Term.TermType'(44) -> 'UNION';
'd_enum_Term.TermType'(45) -> 'NTH';
'd_enum_Term.TermType'(170) -> 'BRACKET';
'd_enum_Term.TermType'(48) -> 'INNER_JOIN';
'd_enum_Term.TermType'(49) -> 'OUTER_JOIN';
'd_enum_Term.TermType'(50) -> 'EQ_JOIN';
'd_enum_Term.TermType'(72) -> 'ZIP';
'd_enum_Term.TermType'(173) -> 'RANGE';
'd_enum_Term.TermType'(82) -> 'INSERT_AT';
'd_enum_Term.TermType'(83) -> 'DELETE_AT';
'd_enum_Term.TermType'(84) -> 'CHANGE_AT';
'd_enum_Term.TermType'(85) -> 'SPLICE_AT';
'd_enum_Term.TermType'(51) -> 'COERCE_TO';
'd_enum_Term.TermType'(52) -> 'TYPE_OF';
'd_enum_Term.TermType'(53) -> 'UPDATE';
'd_enum_Term.TermType'(54) -> 'DELETE';
'd_enum_Term.TermType'(55) -> 'REPLACE';
'd_enum_Term.TermType'(56) -> 'INSERT';
'd_enum_Term.TermType'(57) -> 'DB_CREATE';
'd_enum_Term.TermType'(58) -> 'DB_DROP';
'd_enum_Term.TermType'(59) -> 'DB_LIST';
'd_enum_Term.TermType'(60) -> 'TABLE_CREATE';
'd_enum_Term.TermType'(61) -> 'TABLE_DROP';
'd_enum_Term.TermType'(62) -> 'TABLE_LIST';
'd_enum_Term.TermType'(174) -> 'CONFIG';
'd_enum_Term.TermType'(175) -> 'STATUS';
'd_enum_Term.TermType'(177) -> 'WAIT';
'd_enum_Term.TermType'(176) -> 'RECONFIGURE';
'd_enum_Term.TermType'(179) -> 'REBALANCE';
'd_enum_Term.TermType'(138) -> 'SYNC';
'd_enum_Term.TermType'(188) -> 'GRANT';
'd_enum_Term.TermType'(75) -> 'INDEX_CREATE';
'd_enum_Term.TermType'(76) -> 'INDEX_DROP';
'd_enum_Term.TermType'(77) -> 'INDEX_LIST';
'd_enum_Term.TermType'(139) -> 'INDEX_STATUS';
'd_enum_Term.TermType'(140) -> 'INDEX_WAIT';
'd_enum_Term.TermType'(156) -> 'INDEX_RENAME';
'd_enum_Term.TermType'(189) -> 'SET_WRITE_HOOK';
'd_enum_Term.TermType'(190) -> 'GET_WRITE_HOOK';
'd_enum_Term.TermType'(64) -> 'FUNCALL';
'd_enum_Term.TermType'(65) -> 'BRANCH';
'd_enum_Term.TermType'(66) -> 'OR';
'd_enum_Term.TermType'(67) -> 'AND';
'd_enum_Term.TermType'(68) -> 'FOR_EACH';
'd_enum_Term.TermType'(69) -> 'FUNC';
'd_enum_Term.TermType'(73) -> 'ASC';
'd_enum_Term.TermType'(74) -> 'DESC';
'd_enum_Term.TermType'(79) -> 'INFO';
'd_enum_Term.TermType'(97) -> 'MATCH';
'd_enum_Term.TermType'(141) -> 'UPCASE';
'd_enum_Term.TermType'(142) -> 'DOWNCASE';
'd_enum_Term.TermType'(81) -> 'SAMPLE';
'd_enum_Term.TermType'(92) -> 'DEFAULT';
'd_enum_Term.TermType'(98) -> 'JSON';
'd_enum_Term.TermType'(172) -> 'TO_JSON_STRING';
'd_enum_Term.TermType'(99) -> 'ISO8601';
'd_enum_Term.TermType'(100) -> 'TO_ISO8601';
'd_enum_Term.TermType'(101) -> 'EPOCH_TIME';
'd_enum_Term.TermType'(102) -> 'TO_EPOCH_TIME';
'd_enum_Term.TermType'(103) -> 'NOW';
'd_enum_Term.TermType'(104) -> 'IN_TIMEZONE';
'd_enum_Term.TermType'(105) -> 'DURING';
'd_enum_Term.TermType'(106) -> 'DATE';
'd_enum_Term.TermType'(126) -> 'TIME_OF_DAY';
'd_enum_Term.TermType'(127) -> 'TIMEZONE';
'd_enum_Term.TermType'(128) -> 'YEAR';
'd_enum_Term.TermType'(129) -> 'MONTH';
'd_enum_Term.TermType'(130) -> 'DAY';
'd_enum_Term.TermType'(131) -> 'DAY_OF_WEEK';
'd_enum_Term.TermType'(132) -> 'DAY_OF_YEAR';
'd_enum_Term.TermType'(133) -> 'HOURS';
'd_enum_Term.TermType'(134) -> 'MINUTES';
'd_enum_Term.TermType'(135) -> 'SECONDS';
'd_enum_Term.TermType'(136) -> 'TIME';
'd_enum_Term.TermType'(107) -> 'MONDAY';
'd_enum_Term.TermType'(108) -> 'TUESDAY';
'd_enum_Term.TermType'(109) -> 'WEDNESDAY';
'd_enum_Term.TermType'(110) -> 'THURSDAY';
'd_enum_Term.TermType'(111) -> 'FRIDAY';
'd_enum_Term.TermType'(112) -> 'SATURDAY';
'd_enum_Term.TermType'(113) -> 'SUNDAY';
'd_enum_Term.TermType'(114) -> 'JANUARY';
'd_enum_Term.TermType'(115) -> 'FEBRUARY';
'd_enum_Term.TermType'(116) -> 'MARCH';
'd_enum_Term.TermType'(117) -> 'APRIL';
'd_enum_Term.TermType'(118) -> 'MAY';
'd_enum_Term.TermType'(119) -> 'JUNE';
'd_enum_Term.TermType'(120) -> 'JULY';
'd_enum_Term.TermType'(121) -> 'AUGUST';
'd_enum_Term.TermType'(122) -> 'SEPTEMBER';
'd_enum_Term.TermType'(123) -> 'OCTOBER';
'd_enum_Term.TermType'(124) -> 'NOVEMBER';
'd_enum_Term.TermType'(125) -> 'DECEMBER';
'd_enum_Term.TermType'(137) -> 'LITERAL';
'd_enum_Term.TermType'(144) -> 'GROUP';
'd_enum_Term.TermType'(145) -> 'SUM';
'd_enum_Term.TermType'(146) -> 'AVG';
'd_enum_Term.TermType'(147) -> 'MIN';
'd_enum_Term.TermType'(148) -> 'MAX';
'd_enum_Term.TermType'(149) -> 'SPLIT';
'd_enum_Term.TermType'(150) -> 'UNGROUP';
'd_enum_Term.TermType'(151) -> 'RANDOM';
'd_enum_Term.TermType'(152) -> 'CHANGES';
'd_enum_Term.TermType'(154) -> 'ARGS';
'd_enum_Term.TermType'(155) -> 'BINARY';
'd_enum_Term.TermType'(157) -> 'GEOJSON';
'd_enum_Term.TermType'(158) -> 'TO_GEOJSON';
'd_enum_Term.TermType'(159) -> 'POINT';
'd_enum_Term.TermType'(160) -> 'LINE';
'd_enum_Term.TermType'(161) -> 'POLYGON';
'd_enum_Term.TermType'(162) -> 'DISTANCE';
'd_enum_Term.TermType'(163) -> 'INTERSECTS';
'd_enum_Term.TermType'(164) -> 'INCLUDES';
'd_enum_Term.TermType'(165) -> 'CIRCLE';
'd_enum_Term.TermType'(166) -> 'GET_INTERSECTING';
'd_enum_Term.TermType'(167) -> 'FILL';
'd_enum_Term.TermType'(168) -> 'GET_NEAREST';
'd_enum_Term.TermType'(171) -> 'POLYGON_SUB';
'd_enum_Term.TermType'(180) -> 'MINVAL';
'd_enum_Term.TermType'(181) -> 'MAXVAL';
'd_enum_Term.TermType'(V) -> V.



merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #'VersionDummy'{} ->
	  merge_msg_VersionDummy(Prev, New, TrUserData);
      #'Query.AssocPair'{} ->
	  'merge_msg_Query.AssocPair'(Prev, New, TrUserData);
      #'Query'{} -> merge_msg_Query(Prev, New, TrUserData);
      #'Frame'{} -> merge_msg_Frame(Prev, New, TrUserData);
      #'Backtrace'{} ->
	  merge_msg_Backtrace(Prev, New, TrUserData);
      #'Response'{} ->
	  merge_msg_Response(Prev, New, TrUserData);
      #'Datum.AssocPair'{} ->
	  'merge_msg_Datum.AssocPair'(Prev, New, TrUserData);
      #'Datum'{} -> merge_msg_Datum(Prev, New, TrUserData);
      #'Term.AssocPair'{} ->
	  'merge_msg_Term.AssocPair'(Prev, New, TrUserData);
      #'Term'{} -> merge_msg_Term(Prev, New, TrUserData)
    end.

merge_msg_VersionDummy(_Prev, New, _TrUserData) -> New.

'merge_msg_Query.AssocPair'(#'Query.AssocPair'{key =
						   PFkey,
					       val = PFval},
			    #'Query.AssocPair'{key = NFkey, val = NFval},
			    TrUserData) ->
    #'Query.AssocPair'{key =
			   if NFkey =:= undefined -> PFkey;
			      true -> NFkey
			   end,
		       val =
			   if PFval /= undefined, NFval /= undefined ->
				  merge_msg_Term(PFval, NFval, TrUserData);
			      PFval == undefined -> NFval;
			      NFval == undefined -> PFval
			   end}.

merge_msg_Query(#'Query'{type = PFtype, query = PFquery,
			 token = PFtoken,
			 'OBSOLETE_noreply' = PFOBSOLETE_noreply,
			 accepts_r_json = PFaccepts_r_json,
			 global_optargs = PFglobal_optargs},
		#'Query'{type = NFtype, query = NFquery,
			 token = NFtoken,
			 'OBSOLETE_noreply' = NFOBSOLETE_noreply,
			 accepts_r_json = NFaccepts_r_json,
			 global_optargs = NFglobal_optargs},
		TrUserData) ->
    #'Query'{type =
		 if NFtype =:= undefined -> PFtype;
		    true -> NFtype
		 end,
	     query =
		 if PFquery /= undefined, NFquery /= undefined ->
			merge_msg_Term(PFquery, NFquery, TrUserData);
		    PFquery == undefined -> NFquery;
		    NFquery == undefined -> PFquery
		 end,
	     token =
		 if NFtoken =:= undefined -> PFtoken;
		    true -> NFtoken
		 end,
	     'OBSOLETE_noreply' =
		 if NFOBSOLETE_noreply =:= undefined ->
			PFOBSOLETE_noreply;
		    true -> NFOBSOLETE_noreply
		 end,
	     accepts_r_json =
		 if NFaccepts_r_json =:= undefined -> PFaccepts_r_json;
		    true -> NFaccepts_r_json
		 end,
	     global_optargs =
		 'erlang_++'(PFglobal_optargs, NFglobal_optargs,
			     TrUserData)}.

merge_msg_Frame(#'Frame'{type = PFtype, pos = PFpos,
			 opt = PFopt},
		#'Frame'{type = NFtype, pos = NFpos, opt = NFopt}, _) ->
    #'Frame'{type =
		 if NFtype =:= undefined -> PFtype;
		    true -> NFtype
		 end,
	     pos =
		 if NFpos =:= undefined -> PFpos;
		    true -> NFpos
		 end,
	     opt =
		 if NFopt =:= undefined -> PFopt;
		    true -> NFopt
		 end}.

merge_msg_Backtrace(#'Backtrace'{frames = PFframes},
		    #'Backtrace'{frames = NFframes}, TrUserData) ->
    #'Backtrace'{frames =
		     'erlang_++'(PFframes, NFframes, TrUserData)}.

merge_msg_Response(#'Response'{type = PFtype,
			       error_type = PFerror_type, notes = PFnotes,
			       token = PFtoken, response = PFresponse,
			       backtrace = PFbacktrace, profile = PFprofile},
		   #'Response'{type = NFtype, error_type = NFerror_type,
			       notes = NFnotes, token = NFtoken,
			       response = NFresponse, backtrace = NFbacktrace,
			       profile = NFprofile},
		   TrUserData) ->
    #'Response'{type =
		    if NFtype =:= undefined -> PFtype;
		       true -> NFtype
		    end,
		error_type =
		    if NFerror_type =:= undefined -> PFerror_type;
		       true -> NFerror_type
		    end,
		notes = 'erlang_++'(PFnotes, NFnotes, TrUserData),
		token =
		    if NFtoken =:= undefined -> PFtoken;
		       true -> NFtoken
		    end,
		response =
		    'erlang_++'(PFresponse, NFresponse, TrUserData),
		backtrace =
		    if PFbacktrace /= undefined, NFbacktrace /= undefined ->
			   merge_msg_Backtrace(PFbacktrace, NFbacktrace,
					       TrUserData);
		       PFbacktrace == undefined -> NFbacktrace;
		       NFbacktrace == undefined -> PFbacktrace
		    end,
		profile =
		    if PFprofile /= undefined, NFprofile /= undefined ->
			   merge_msg_Datum(PFprofile, NFprofile, TrUserData);
		       PFprofile == undefined -> NFprofile;
		       NFprofile == undefined -> PFprofile
		    end}.

'merge_msg_Datum.AssocPair'(#'Datum.AssocPair'{key =
						   PFkey,
					       val = PFval},
			    #'Datum.AssocPair'{key = NFkey, val = NFval},
			    TrUserData) ->
    #'Datum.AssocPair'{key =
			   if NFkey =:= undefined -> PFkey;
			      true -> NFkey
			   end,
		       val =
			   if PFval /= undefined, NFval /= undefined ->
				  merge_msg_Datum(PFval, NFval, TrUserData);
			      PFval == undefined -> NFval;
			      NFval == undefined -> PFval
			   end}.

merge_msg_Datum(#'Datum'{type = PFtype,
			 r_bool = PFr_bool, r_num = PFr_num, r_str = PFr_str,
			 r_array = PFr_array, r_object = PFr_object},
		#'Datum'{type = NFtype, r_bool = NFr_bool,
			 r_num = NFr_num, r_str = NFr_str, r_array = NFr_array,
			 r_object = NFr_object},
		TrUserData) ->
    #'Datum'{type =
		 if NFtype =:= undefined -> PFtype;
		    true -> NFtype
		 end,
	     r_bool =
		 if NFr_bool =:= undefined -> PFr_bool;
		    true -> NFr_bool
		 end,
	     r_num =
		 if NFr_num =:= undefined -> PFr_num;
		    true -> NFr_num
		 end,
	     r_str =
		 if NFr_str =:= undefined -> PFr_str;
		    true -> NFr_str
		 end,
	     r_array = 'erlang_++'(PFr_array, NFr_array, TrUserData),
	     r_object =
		 'erlang_++'(PFr_object, NFr_object, TrUserData)}.

'merge_msg_Term.AssocPair'(#'Term.AssocPair'{key =
						 PFkey,
					     val = PFval},
			   #'Term.AssocPair'{key = NFkey, val = NFval},
			   TrUserData) ->
    #'Term.AssocPair'{key =
			  if NFkey =:= undefined -> PFkey;
			     true -> NFkey
			  end,
		      val =
			  if PFval /= undefined, NFval /= undefined ->
				 merge_msg_Term(PFval, NFval, TrUserData);
			     PFval == undefined -> NFval;
			     NFval == undefined -> PFval
			  end}.

merge_msg_Term(#'Term'{type = PFtype, datum = PFdatum,
		       args = PFargs, optargs = PFoptargs},
	       #'Term'{type = NFtype, datum = NFdatum, args = NFargs,
		       optargs = NFoptargs},
	       TrUserData) ->
    #'Term'{type =
		if NFtype =:= undefined -> PFtype;
		   true -> NFtype
		end,
	    datum =
		if PFdatum /= undefined, NFdatum /= undefined ->
		       merge_msg_Datum(PFdatum, NFdatum, TrUserData);
		   PFdatum == undefined -> NFdatum;
		   NFdatum == undefined -> PFdatum
		end,
	    args = 'erlang_++'(PFargs, NFargs, TrUserData),
	    optargs =
		'erlang_++'(PFoptargs, NFoptargs, TrUserData)}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'VersionDummy'{} ->
	  v_msg_VersionDummy(Msg, ['VersionDummy'], TrUserData);
      #'Query.AssocPair'{} ->
	  'v_msg_Query.AssocPair'(Msg, ['Query.AssocPair'],
				  TrUserData);
      #'Query'{} -> v_msg_Query(Msg, ['Query'], TrUserData);
      #'Frame'{} -> v_msg_Frame(Msg, ['Frame'], TrUserData);
      #'Backtrace'{} ->
	  v_msg_Backtrace(Msg, ['Backtrace'], TrUserData);
      #'Response'{} ->
	  v_msg_Response(Msg, ['Response'], TrUserData);
      #'Datum.AssocPair'{} ->
	  'v_msg_Datum.AssocPair'(Msg, ['Datum.AssocPair'],
				  TrUserData);
      #'Datum'{} -> v_msg_Datum(Msg, ['Datum'], TrUserData);
      #'Term.AssocPair'{} ->
	  'v_msg_Term.AssocPair'(Msg, ['Term.AssocPair'],
				 TrUserData);
      #'Term'{} -> v_msg_Term(Msg, ['Term'], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_VersionDummy/3}).
v_msg_VersionDummy(#'VersionDummy'{}, _Path, _) -> ok.

-dialyzer({nowarn_function,'v_msg_Query.AssocPair'/3}).
'v_msg_Query.AssocPair'(#'Query.AssocPair'{key = F1,
					   val = F2},
			Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [key | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_msg_Term(F2, [val | Path], TrUserData)
    end,
    ok;
'v_msg_Query.AssocPair'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Query.AssocPair'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_Query/3}).
v_msg_Query(#'Query'{type = F1, query = F2, token = F3,
		     'OBSOLETE_noreply' = F4, accepts_r_json = F5,
		     global_optargs = F6},
	    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> 'v_enum_Query.QueryType'(F1, [type | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_msg_Term(F2, [query | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_int64(F3, [token | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_bool(F4, ['OBSOLETE_noreply' | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_bool(F5, [accepts_r_json | Path])
    end,
    if is_list(F6) ->
	   _ = ['v_msg_Query.AssocPair'(Elem,
					[global_optargs | Path], TrUserData)
		|| Elem <- F6],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'Query.AssocPair'}},
			 F6, Path)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_Frame/3}).
v_msg_Frame(#'Frame'{type = F1, pos = F2, opt = F3},
	    Path, _) ->
    if F1 == undefined -> ok;
       true -> 'v_enum_Frame.FrameType'(F1, [type | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [pos | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [opt | Path])
    end,
    ok;
v_msg_Frame(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Frame'}, X, Path).

-dialyzer({nowarn_function,v_msg_Backtrace/3}).
v_msg_Backtrace(#'Backtrace'{frames = F1}, Path,
		TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_Frame(Elem, [frames | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Frame'}}, F1,
			 Path)
    end,
    ok;
v_msg_Backtrace(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Backtrace'}, X, Path).

-dialyzer({nowarn_function,v_msg_Response/3}).
v_msg_Response(#'Response'{type = F1, error_type = F2,
			   notes = F3, token = F4, response = F5,
			   backtrace = F6, profile = F7},
	       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   'v_enum_Response.ResponseType'(F1, [type | Path])
    end,
    if F2 == undefined -> ok;
       true ->
	   'v_enum_Response.ErrorType'(F2, [error_type | Path])
    end,
    if is_list(F3) ->
	   _ = ['v_enum_Response.ResponseNote'(Elem,
					       [notes | Path])
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {enum, 'Response.ResponseNote'}},
			 F3, Path)
    end,
    if F4 == undefined -> ok;
       true -> v_type_int64(F4, [token | Path])
    end,
    if is_list(F5) ->
	   _ = [v_msg_Datum(Elem, [response | Path], TrUserData)
		|| Elem <- F5],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Datum'}}, F5,
			 Path)
    end,
    if F6 == undefined -> ok;
       true ->
	   v_msg_Backtrace(F6, [backtrace | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_msg_Datum(F7, [profile | Path], TrUserData)
    end,
    ok.

-dialyzer({nowarn_function,'v_msg_Datum.AssocPair'/3}).
'v_msg_Datum.AssocPair'(#'Datum.AssocPair'{key = F1,
					   val = F2},
			Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [key | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_msg_Datum(F2, [val | Path], TrUserData)
    end,
    ok;
'v_msg_Datum.AssocPair'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Datum.AssocPair'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_Datum/3}).
v_msg_Datum(#'Datum'{type = F1, r_bool = F2, r_num = F3,
		     r_str = F4, r_array = F5, r_object = F6},
	    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> 'v_enum_Datum.DatumType'(F1, [type | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [r_bool | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_double(F3, [r_num | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [r_str | Path])
    end,
    if is_list(F5) ->
	   _ = [v_msg_Datum(Elem, [r_array | Path], TrUserData)
		|| Elem <- F5],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Datum'}}, F5,
			 Path)
    end,
    if is_list(F6) ->
	   _ = ['v_msg_Datum.AssocPair'(Elem, [r_object | Path],
					TrUserData)
		|| Elem <- F6],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'Datum.AssocPair'}},
			 F6, Path)
    end,
    ok;
v_msg_Datum(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Datum'}, X, Path).

-dialyzer({nowarn_function,'v_msg_Term.AssocPair'/3}).
'v_msg_Term.AssocPair'(#'Term.AssocPair'{key = F1,
					 val = F2},
		       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [key | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_msg_Term(F2, [val | Path], TrUserData)
    end,
    ok;
'v_msg_Term.AssocPair'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Term.AssocPair'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_Term/3}).
v_msg_Term(#'Term'{type = F1, datum = F2, args = F3,
		   optargs = F4},
	   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> 'v_enum_Term.TermType'(F1, [type | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_msg_Datum(F2, [datum | Path], TrUserData)
    end,
    if is_list(F3) ->
	   _ = [v_msg_Term(Elem, [args | Path], TrUserData)
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Term'}}, F3,
			 Path)
    end,
    if is_list(F4) ->
	   _ = ['v_msg_Term.AssocPair'(Elem, [optargs | Path],
				       TrUserData)
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'Term.AssocPair'}},
			 F4, Path)
    end,
    ok;
v_msg_Term(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Term'}, X, Path).

-dialyzer({nowarn_function,'v_enum_Query.QueryType'/2}).
'v_enum_Query.QueryType'('START', _Path) -> ok;
'v_enum_Query.QueryType'('CONTINUE', _Path) -> ok;
'v_enum_Query.QueryType'('STOP', _Path) -> ok;
'v_enum_Query.QueryType'('NOREPLY_WAIT', _Path) -> ok;
'v_enum_Query.QueryType'('SERVER_INFO', _Path) -> ok;
'v_enum_Query.QueryType'(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_Query.QueryType'(X, Path) ->
    mk_type_error({invalid_enum, 'Query.QueryType'}, X,
		  Path).

-dialyzer({nowarn_function,'v_enum_Frame.FrameType'/2}).
'v_enum_Frame.FrameType'('POS', _Path) -> ok;
'v_enum_Frame.FrameType'('OPT', _Path) -> ok;
'v_enum_Frame.FrameType'(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_Frame.FrameType'(X, Path) ->
    mk_type_error({invalid_enum, 'Frame.FrameType'}, X,
		  Path).

-dialyzer({nowarn_function,'v_enum_Response.ResponseType'/2}).
'v_enum_Response.ResponseType'('SUCCESS_ATOM', _Path) ->
    ok;
'v_enum_Response.ResponseType'('SUCCESS_SEQUENCE',
			       _Path) ->
    ok;
'v_enum_Response.ResponseType'('SUCCESS_PARTIAL',
			       _Path) ->
    ok;
'v_enum_Response.ResponseType'('WAIT_COMPLETE',
			       _Path) ->
    ok;
'v_enum_Response.ResponseType'('SERVER_INFO', _Path) ->
    ok;
'v_enum_Response.ResponseType'('CLIENT_ERROR', _Path) ->
    ok;
'v_enum_Response.ResponseType'('COMPILE_ERROR',
			       _Path) ->
    ok;
'v_enum_Response.ResponseType'('RUNTIME_ERROR',
			       _Path) ->
    ok;
'v_enum_Response.ResponseType'(V, Path)
    when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_Response.ResponseType'(X, Path) ->
    mk_type_error({invalid_enum, 'Response.ResponseType'},
		  X, Path).

-dialyzer({nowarn_function,'v_enum_Response.ErrorType'/2}).
'v_enum_Response.ErrorType'('INTERNAL', _Path) -> ok;
'v_enum_Response.ErrorType'('RESOURCE_LIMIT', _Path) ->
    ok;
'v_enum_Response.ErrorType'('QUERY_LOGIC', _Path) -> ok;
'v_enum_Response.ErrorType'('NON_EXISTENCE', _Path) ->
    ok;
'v_enum_Response.ErrorType'('OP_FAILED', _Path) -> ok;
'v_enum_Response.ErrorType'('OP_INDETERMINATE',
			    _Path) ->
    ok;
'v_enum_Response.ErrorType'('USER', _Path) -> ok;
'v_enum_Response.ErrorType'('PERMISSION_ERROR',
			    _Path) ->
    ok;
'v_enum_Response.ErrorType'(V, Path)
    when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_Response.ErrorType'(X, Path) ->
    mk_type_error({invalid_enum, 'Response.ErrorType'}, X,
		  Path).

-dialyzer({nowarn_function,'v_enum_Response.ResponseNote'/2}).
'v_enum_Response.ResponseNote'('SEQUENCE_FEED',
			       _Path) ->
    ok;
'v_enum_Response.ResponseNote'('ATOM_FEED', _Path) ->
    ok;
'v_enum_Response.ResponseNote'('ORDER_BY_LIMIT_FEED',
			       _Path) ->
    ok;
'v_enum_Response.ResponseNote'('UNIONED_FEED', _Path) ->
    ok;
'v_enum_Response.ResponseNote'('INCLUDES_STATES',
			       _Path) ->
    ok;
'v_enum_Response.ResponseNote'(V, Path)
    when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_Response.ResponseNote'(X, Path) ->
    mk_type_error({invalid_enum, 'Response.ResponseNote'},
		  X, Path).

-dialyzer({nowarn_function,'v_enum_Datum.DatumType'/2}).
'v_enum_Datum.DatumType'('R_NULL', _Path) -> ok;
'v_enum_Datum.DatumType'('R_BOOL', _Path) -> ok;
'v_enum_Datum.DatumType'('R_NUM', _Path) -> ok;
'v_enum_Datum.DatumType'('R_STR', _Path) -> ok;
'v_enum_Datum.DatumType'('R_ARRAY', _Path) -> ok;
'v_enum_Datum.DatumType'('R_OBJECT', _Path) -> ok;
'v_enum_Datum.DatumType'('R_JSON', _Path) -> ok;
'v_enum_Datum.DatumType'(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_Datum.DatumType'(X, Path) ->
    mk_type_error({invalid_enum, 'Datum.DatumType'}, X,
		  Path).

-dialyzer({nowarn_function,'v_enum_Term.TermType'/2}).
'v_enum_Term.TermType'('DATUM', _Path) -> ok;
'v_enum_Term.TermType'('MAKE_ARRAY', _Path) -> ok;
'v_enum_Term.TermType'('MAKE_OBJ', _Path) -> ok;
'v_enum_Term.TermType'('VAR', _Path) -> ok;
'v_enum_Term.TermType'('JAVASCRIPT', _Path) -> ok;
'v_enum_Term.TermType'('UUID', _Path) -> ok;
'v_enum_Term.TermType'('HTTP', _Path) -> ok;
'v_enum_Term.TermType'('ERROR', _Path) -> ok;
'v_enum_Term.TermType'('IMPLICIT_VAR', _Path) -> ok;
'v_enum_Term.TermType'('DB', _Path) -> ok;
'v_enum_Term.TermType'('TABLE', _Path) -> ok;
'v_enum_Term.TermType'('GET', _Path) -> ok;
'v_enum_Term.TermType'('GET_ALL', _Path) -> ok;
'v_enum_Term.TermType'('EQ', _Path) -> ok;
'v_enum_Term.TermType'('NE', _Path) -> ok;
'v_enum_Term.TermType'('LT', _Path) -> ok;
'v_enum_Term.TermType'('LE', _Path) -> ok;
'v_enum_Term.TermType'('GT', _Path) -> ok;
'v_enum_Term.TermType'('GE', _Path) -> ok;
'v_enum_Term.TermType'('NOT', _Path) -> ok;
'v_enum_Term.TermType'('ADD', _Path) -> ok;
'v_enum_Term.TermType'('SUB', _Path) -> ok;
'v_enum_Term.TermType'('MUL', _Path) -> ok;
'v_enum_Term.TermType'('DIV', _Path) -> ok;
'v_enum_Term.TermType'('MOD', _Path) -> ok;
'v_enum_Term.TermType'('FLOOR', _Path) -> ok;
'v_enum_Term.TermType'('CEIL', _Path) -> ok;
'v_enum_Term.TermType'('ROUND', _Path) -> ok;
'v_enum_Term.TermType'('APPEND', _Path) -> ok;
'v_enum_Term.TermType'('PREPEND', _Path) -> ok;
'v_enum_Term.TermType'('DIFFERENCE', _Path) -> ok;
'v_enum_Term.TermType'('SET_INSERT', _Path) -> ok;
'v_enum_Term.TermType'('SET_INTERSECTION', _Path) -> ok;
'v_enum_Term.TermType'('SET_UNION', _Path) -> ok;
'v_enum_Term.TermType'('SET_DIFFERENCE', _Path) -> ok;
'v_enum_Term.TermType'('SLICE', _Path) -> ok;
'v_enum_Term.TermType'('SKIP', _Path) -> ok;
'v_enum_Term.TermType'('LIMIT', _Path) -> ok;
'v_enum_Term.TermType'('OFFSETS_OF', _Path) -> ok;
'v_enum_Term.TermType'('CONTAINS', _Path) -> ok;
'v_enum_Term.TermType'('GET_FIELD', _Path) -> ok;
'v_enum_Term.TermType'('KEYS', _Path) -> ok;
'v_enum_Term.TermType'('VALUES', _Path) -> ok;
'v_enum_Term.TermType'('OBJECT', _Path) -> ok;
'v_enum_Term.TermType'('HAS_FIELDS', _Path) -> ok;
'v_enum_Term.TermType'('WITH_FIELDS', _Path) -> ok;
'v_enum_Term.TermType'('PLUCK', _Path) -> ok;
'v_enum_Term.TermType'('WITHOUT', _Path) -> ok;
'v_enum_Term.TermType'('MERGE', _Path) -> ok;
'v_enum_Term.TermType'('BETWEEN_DEPRECATED', _Path) ->
    ok;
'v_enum_Term.TermType'('BETWEEN', _Path) -> ok;
'v_enum_Term.TermType'('REDUCE', _Path) -> ok;
'v_enum_Term.TermType'('MAP', _Path) -> ok;
'v_enum_Term.TermType'('FOLD', _Path) -> ok;
'v_enum_Term.TermType'('FILTER', _Path) -> ok;
'v_enum_Term.TermType'('CONCAT_MAP', _Path) -> ok;
'v_enum_Term.TermType'('ORDER_BY', _Path) -> ok;
'v_enum_Term.TermType'('DISTINCT', _Path) -> ok;
'v_enum_Term.TermType'('COUNT', _Path) -> ok;
'v_enum_Term.TermType'('IS_EMPTY', _Path) -> ok;
'v_enum_Term.TermType'('UNION', _Path) -> ok;
'v_enum_Term.TermType'('NTH', _Path) -> ok;
'v_enum_Term.TermType'('BRACKET', _Path) -> ok;
'v_enum_Term.TermType'('INNER_JOIN', _Path) -> ok;
'v_enum_Term.TermType'('OUTER_JOIN', _Path) -> ok;
'v_enum_Term.TermType'('EQ_JOIN', _Path) -> ok;
'v_enum_Term.TermType'('ZIP', _Path) -> ok;
'v_enum_Term.TermType'('RANGE', _Path) -> ok;
'v_enum_Term.TermType'('INSERT_AT', _Path) -> ok;
'v_enum_Term.TermType'('DELETE_AT', _Path) -> ok;
'v_enum_Term.TermType'('CHANGE_AT', _Path) -> ok;
'v_enum_Term.TermType'('SPLICE_AT', _Path) -> ok;
'v_enum_Term.TermType'('COERCE_TO', _Path) -> ok;
'v_enum_Term.TermType'('TYPE_OF', _Path) -> ok;
'v_enum_Term.TermType'('UPDATE', _Path) -> ok;
'v_enum_Term.TermType'('DELETE', _Path) -> ok;
'v_enum_Term.TermType'('REPLACE', _Path) -> ok;
'v_enum_Term.TermType'('INSERT', _Path) -> ok;
'v_enum_Term.TermType'('DB_CREATE', _Path) -> ok;
'v_enum_Term.TermType'('DB_DROP', _Path) -> ok;
'v_enum_Term.TermType'('DB_LIST', _Path) -> ok;
'v_enum_Term.TermType'('TABLE_CREATE', _Path) -> ok;
'v_enum_Term.TermType'('TABLE_DROP', _Path) -> ok;
'v_enum_Term.TermType'('TABLE_LIST', _Path) -> ok;
'v_enum_Term.TermType'('CONFIG', _Path) -> ok;
'v_enum_Term.TermType'('STATUS', _Path) -> ok;
'v_enum_Term.TermType'('WAIT', _Path) -> ok;
'v_enum_Term.TermType'('RECONFIGURE', _Path) -> ok;
'v_enum_Term.TermType'('REBALANCE', _Path) -> ok;
'v_enum_Term.TermType'('SYNC', _Path) -> ok;
'v_enum_Term.TermType'('GRANT', _Path) -> ok;
'v_enum_Term.TermType'('INDEX_CREATE', _Path) -> ok;
'v_enum_Term.TermType'('INDEX_DROP', _Path) -> ok;
'v_enum_Term.TermType'('INDEX_LIST', _Path) -> ok;
'v_enum_Term.TermType'('INDEX_STATUS', _Path) -> ok;
'v_enum_Term.TermType'('INDEX_WAIT', _Path) -> ok;
'v_enum_Term.TermType'('INDEX_RENAME', _Path) -> ok;
'v_enum_Term.TermType'('SET_WRITE_HOOK', _Path) -> ok;
'v_enum_Term.TermType'('GET_WRITE_HOOK', _Path) -> ok;
'v_enum_Term.TermType'('FUNCALL', _Path) -> ok;
'v_enum_Term.TermType'('BRANCH', _Path) -> ok;
'v_enum_Term.TermType'('OR', _Path) -> ok;
'v_enum_Term.TermType'('AND', _Path) -> ok;
'v_enum_Term.TermType'('FOR_EACH', _Path) -> ok;
'v_enum_Term.TermType'('FUNC', _Path) -> ok;
'v_enum_Term.TermType'('ASC', _Path) -> ok;
'v_enum_Term.TermType'('DESC', _Path) -> ok;
'v_enum_Term.TermType'('INFO', _Path) -> ok;
'v_enum_Term.TermType'('MATCH', _Path) -> ok;
'v_enum_Term.TermType'('UPCASE', _Path) -> ok;
'v_enum_Term.TermType'('DOWNCASE', _Path) -> ok;
'v_enum_Term.TermType'('SAMPLE', _Path) -> ok;
'v_enum_Term.TermType'('DEFAULT', _Path) -> ok;
'v_enum_Term.TermType'('JSON', _Path) -> ok;
'v_enum_Term.TermType'('TO_JSON_STRING', _Path) -> ok;
'v_enum_Term.TermType'('ISO8601', _Path) -> ok;
'v_enum_Term.TermType'('TO_ISO8601', _Path) -> ok;
'v_enum_Term.TermType'('EPOCH_TIME', _Path) -> ok;
'v_enum_Term.TermType'('TO_EPOCH_TIME', _Path) -> ok;
'v_enum_Term.TermType'('NOW', _Path) -> ok;
'v_enum_Term.TermType'('IN_TIMEZONE', _Path) -> ok;
'v_enum_Term.TermType'('DURING', _Path) -> ok;
'v_enum_Term.TermType'('DATE', _Path) -> ok;
'v_enum_Term.TermType'('TIME_OF_DAY', _Path) -> ok;
'v_enum_Term.TermType'('TIMEZONE', _Path) -> ok;
'v_enum_Term.TermType'('YEAR', _Path) -> ok;
'v_enum_Term.TermType'('MONTH', _Path) -> ok;
'v_enum_Term.TermType'('DAY', _Path) -> ok;
'v_enum_Term.TermType'('DAY_OF_WEEK', _Path) -> ok;
'v_enum_Term.TermType'('DAY_OF_YEAR', _Path) -> ok;
'v_enum_Term.TermType'('HOURS', _Path) -> ok;
'v_enum_Term.TermType'('MINUTES', _Path) -> ok;
'v_enum_Term.TermType'('SECONDS', _Path) -> ok;
'v_enum_Term.TermType'('TIME', _Path) -> ok;
'v_enum_Term.TermType'('MONDAY', _Path) -> ok;
'v_enum_Term.TermType'('TUESDAY', _Path) -> ok;
'v_enum_Term.TermType'('WEDNESDAY', _Path) -> ok;
'v_enum_Term.TermType'('THURSDAY', _Path) -> ok;
'v_enum_Term.TermType'('FRIDAY', _Path) -> ok;
'v_enum_Term.TermType'('SATURDAY', _Path) -> ok;
'v_enum_Term.TermType'('SUNDAY', _Path) -> ok;
'v_enum_Term.TermType'('JANUARY', _Path) -> ok;
'v_enum_Term.TermType'('FEBRUARY', _Path) -> ok;
'v_enum_Term.TermType'('MARCH', _Path) -> ok;
'v_enum_Term.TermType'('APRIL', _Path) -> ok;
'v_enum_Term.TermType'('MAY', _Path) -> ok;
'v_enum_Term.TermType'('JUNE', _Path) -> ok;
'v_enum_Term.TermType'('JULY', _Path) -> ok;
'v_enum_Term.TermType'('AUGUST', _Path) -> ok;
'v_enum_Term.TermType'('SEPTEMBER', _Path) -> ok;
'v_enum_Term.TermType'('OCTOBER', _Path) -> ok;
'v_enum_Term.TermType'('NOVEMBER', _Path) -> ok;
'v_enum_Term.TermType'('DECEMBER', _Path) -> ok;
'v_enum_Term.TermType'('LITERAL', _Path) -> ok;
'v_enum_Term.TermType'('GROUP', _Path) -> ok;
'v_enum_Term.TermType'('SUM', _Path) -> ok;
'v_enum_Term.TermType'('AVG', _Path) -> ok;
'v_enum_Term.TermType'('MIN', _Path) -> ok;
'v_enum_Term.TermType'('MAX', _Path) -> ok;
'v_enum_Term.TermType'('SPLIT', _Path) -> ok;
'v_enum_Term.TermType'('UNGROUP', _Path) -> ok;
'v_enum_Term.TermType'('RANDOM', _Path) -> ok;
'v_enum_Term.TermType'('CHANGES', _Path) -> ok;
'v_enum_Term.TermType'('ARGS', _Path) -> ok;
'v_enum_Term.TermType'('BINARY', _Path) -> ok;
'v_enum_Term.TermType'('GEOJSON', _Path) -> ok;
'v_enum_Term.TermType'('TO_GEOJSON', _Path) -> ok;
'v_enum_Term.TermType'('POINT', _Path) -> ok;
'v_enum_Term.TermType'('LINE', _Path) -> ok;
'v_enum_Term.TermType'('POLYGON', _Path) -> ok;
'v_enum_Term.TermType'('DISTANCE', _Path) -> ok;
'v_enum_Term.TermType'('INTERSECTS', _Path) -> ok;
'v_enum_Term.TermType'('INCLUDES', _Path) -> ok;
'v_enum_Term.TermType'('CIRCLE', _Path) -> ok;
'v_enum_Term.TermType'('GET_INTERSECTING', _Path) -> ok;
'v_enum_Term.TermType'('FILL', _Path) -> ok;
'v_enum_Term.TermType'('GET_NEAREST', _Path) -> ok;
'v_enum_Term.TermType'('POLYGON_SUB', _Path) -> ok;
'v_enum_Term.TermType'('MINVAL', _Path) -> ok;
'v_enum_Term.TermType'('MAXVAL', _Path) -> ok;
'v_enum_Term.TermType'(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_Term.TermType'(X, Path) ->
    mk_type_error({invalid_enum, 'Term.TermType'}, X, Path).

-dialyzer({nowarn_function,v_type_sint32/2}).
v_type_sint32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_int64/2}).
v_type_int64(N, _Path)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-dialyzer({nowarn_function,v_type_bool/2}).
v_type_bool(false, _Path) -> ok;
v_type_bool(true, _Path) -> ok;
v_type_bool(0, _Path) -> ok;
v_type_bool(1, _Path) -> ok;
v_type_bool(X, Path) ->
    mk_type_error(bad_boolean_value, X, Path).

-dialyzer({nowarn_function,v_type_double/2}).
v_type_double(N, _Path) when is_float(N) -> ok;
v_type_double(N, _Path) when is_integer(N) -> ok;
v_type_double(infinity, _Path) -> ok;
v_type_double('-infinity', _Path) -> ok;
v_type_double(nan, _Path) -> ok;
v_type_double(X, Path) ->
    mk_type_error(bad_double_value, X, Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).

-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.



get_msg_defs() ->
    [{{enum, 'VersionDummy.Version'},
      [{'V0_1', 1063369270}, {'V0_2', 1915781601},
       {'V0_3', 1601562686}, {'V0_4', 1074539808},
       {'V1_0', 885177795}]},
     {{enum, 'VersionDummy.Protocol'},
      [{'PROTOBUF', 656407617}, {'JSON', 2120839367}]},
     {{enum, 'Query.QueryType'},
      [{'START', 1}, {'CONTINUE', 2}, {'STOP', 3},
       {'NOREPLY_WAIT', 4}, {'SERVER_INFO', 5}]},
     {{enum, 'Frame.FrameType'}, [{'POS', 1}, {'OPT', 2}]},
     {{enum, 'Response.ResponseType'},
      [{'SUCCESS_ATOM', 1}, {'SUCCESS_SEQUENCE', 2},
       {'SUCCESS_PARTIAL', 3}, {'WAIT_COMPLETE', 4},
       {'SERVER_INFO', 5}, {'CLIENT_ERROR', 16},
       {'COMPILE_ERROR', 17}, {'RUNTIME_ERROR', 18}]},
     {{enum, 'Response.ErrorType'},
      [{'INTERNAL', 1000000}, {'RESOURCE_LIMIT', 2000000},
       {'QUERY_LOGIC', 3000000}, {'NON_EXISTENCE', 3100000},
       {'OP_FAILED', 4100000}, {'OP_INDETERMINATE', 4200000},
       {'USER', 5000000}, {'PERMISSION_ERROR', 6000000}]},
     {{enum, 'Response.ResponseNote'},
      [{'SEQUENCE_FEED', 1}, {'ATOM_FEED', 2},
       {'ORDER_BY_LIMIT_FEED', 3}, {'UNIONED_FEED', 4},
       {'INCLUDES_STATES', 5}]},
     {{enum, 'Datum.DatumType'},
      [{'R_NULL', 1}, {'R_BOOL', 2}, {'R_NUM', 3},
       {'R_STR', 4}, {'R_ARRAY', 5}, {'R_OBJECT', 6},
       {'R_JSON', 7}]},
     {{enum, 'Term.TermType'},
      [{'DATUM', 1}, {'MAKE_ARRAY', 2}, {'MAKE_OBJ', 3},
       {'VAR', 10}, {'JAVASCRIPT', 11}, {'UUID', 169},
       {'HTTP', 153}, {'ERROR', 12}, {'IMPLICIT_VAR', 13},
       {'DB', 14}, {'TABLE', 15}, {'GET', 16}, {'GET_ALL', 78},
       {'EQ', 17}, {'NE', 18}, {'LT', 19}, {'LE', 20},
       {'GT', 21}, {'GE', 22}, {'NOT', 23}, {'ADD', 24},
       {'SUB', 25}, {'MUL', 26}, {'DIV', 27}, {'MOD', 28},
       {'FLOOR', 183}, {'CEIL', 184}, {'ROUND', 185},
       {'APPEND', 29}, {'PREPEND', 80}, {'DIFFERENCE', 95},
       {'SET_INSERT', 88}, {'SET_INTERSECTION', 89},
       {'SET_UNION', 90}, {'SET_DIFFERENCE', 91},
       {'SLICE', 30}, {'SKIP', 70}, {'LIMIT', 71},
       {'OFFSETS_OF', 87}, {'CONTAINS', 93}, {'GET_FIELD', 31},
       {'KEYS', 94}, {'VALUES', 186}, {'OBJECT', 143},
       {'HAS_FIELDS', 32}, {'WITH_FIELDS', 96}, {'PLUCK', 33},
       {'WITHOUT', 34}, {'MERGE', 35},
       {'BETWEEN_DEPRECATED', 36}, {'BETWEEN', 182},
       {'REDUCE', 37}, {'MAP', 38}, {'FOLD', 187},
       {'FILTER', 39}, {'CONCAT_MAP', 40}, {'ORDER_BY', 41},
       {'DISTINCT', 42}, {'COUNT', 43}, {'IS_EMPTY', 86},
       {'UNION', 44}, {'NTH', 45}, {'BRACKET', 170},
       {'INNER_JOIN', 48}, {'OUTER_JOIN', 49}, {'EQ_JOIN', 50},
       {'ZIP', 72}, {'RANGE', 173}, {'INSERT_AT', 82},
       {'DELETE_AT', 83}, {'CHANGE_AT', 84}, {'SPLICE_AT', 85},
       {'COERCE_TO', 51}, {'TYPE_OF', 52}, {'UPDATE', 53},
       {'DELETE', 54}, {'REPLACE', 55}, {'INSERT', 56},
       {'DB_CREATE', 57}, {'DB_DROP', 58}, {'DB_LIST', 59},
       {'TABLE_CREATE', 60}, {'TABLE_DROP', 61},
       {'TABLE_LIST', 62}, {'CONFIG', 174}, {'STATUS', 175},
       {'WAIT', 177}, {'RECONFIGURE', 176}, {'REBALANCE', 179},
       {'SYNC', 138}, {'GRANT', 188}, {'INDEX_CREATE', 75},
       {'INDEX_DROP', 76}, {'INDEX_LIST', 77},
       {'INDEX_STATUS', 139}, {'INDEX_WAIT', 140},
       {'INDEX_RENAME', 156}, {'SET_WRITE_HOOK', 189},
       {'GET_WRITE_HOOK', 190}, {'FUNCALL', 64},
       {'BRANCH', 65}, {'OR', 66}, {'AND', 67},
       {'FOR_EACH', 68}, {'FUNC', 69}, {'ASC', 73},
       {'DESC', 74}, {'INFO', 79}, {'MATCH', 97},
       {'UPCASE', 141}, {'DOWNCASE', 142}, {'SAMPLE', 81},
       {'DEFAULT', 92}, {'JSON', 98}, {'TO_JSON_STRING', 172},
       {'ISO8601', 99}, {'TO_ISO8601', 100},
       {'EPOCH_TIME', 101}, {'TO_EPOCH_TIME', 102},
       {'NOW', 103}, {'IN_TIMEZONE', 104}, {'DURING', 105},
       {'DATE', 106}, {'TIME_OF_DAY', 126}, {'TIMEZONE', 127},
       {'YEAR', 128}, {'MONTH', 129}, {'DAY', 130},
       {'DAY_OF_WEEK', 131}, {'DAY_OF_YEAR', 132},
       {'HOURS', 133}, {'MINUTES', 134}, {'SECONDS', 135},
       {'TIME', 136}, {'MONDAY', 107}, {'TUESDAY', 108},
       {'WEDNESDAY', 109}, {'THURSDAY', 110}, {'FRIDAY', 111},
       {'SATURDAY', 112}, {'SUNDAY', 113}, {'JANUARY', 114},
       {'FEBRUARY', 115}, {'MARCH', 116}, {'APRIL', 117},
       {'MAY', 118}, {'JUNE', 119}, {'JULY', 120},
       {'AUGUST', 121}, {'SEPTEMBER', 122}, {'OCTOBER', 123},
       {'NOVEMBER', 124}, {'DECEMBER', 125}, {'LITERAL', 137},
       {'GROUP', 144}, {'SUM', 145}, {'AVG', 146},
       {'MIN', 147}, {'MAX', 148}, {'SPLIT', 149},
       {'UNGROUP', 150}, {'RANDOM', 151}, {'CHANGES', 152},
       {'ARGS', 154}, {'BINARY', 155}, {'GEOJSON', 157},
       {'TO_GEOJSON', 158}, {'POINT', 159}, {'LINE', 160},
       {'POLYGON', 161}, {'DISTANCE', 162},
       {'INTERSECTS', 163}, {'INCLUDES', 164}, {'CIRCLE', 165},
       {'GET_INTERSECTING', 166}, {'FILL', 167},
       {'GET_NEAREST', 168}, {'POLYGON_SUB', 171},
       {'MINVAL', 180}, {'MAXVAL', 181}]},
     {{msg, 'VersionDummy'}, []},
     {{msg, 'Query.AssocPair'},
      [[{name, key}, {fnum, 1}, {rnum, 2}, {type, string},
	{occurrence, optional}, {opts, []}],
       [{name, val}, {fnum, 2}, {rnum, 3},
	{type, {msg, 'Term'}}, {occurrence, optional},
	{opts, []}]]},
     {{msg, 'Query'},
      [[{name, type}, {fnum, 1}, {rnum, 2},
	{type, {enum, 'Query.QueryType'}},
	{occurrence, optional}, {opts, []}],
       [{name, query}, {fnum, 2}, {rnum, 3},
	{type, {msg, 'Term'}}, {occurrence, optional},
	{opts, []}],
       [{name, token}, {fnum, 3}, {rnum, 4}, {type, int64},
	{occurrence, optional}, {opts, []}],
       [{name, 'OBSOLETE_noreply'}, {fnum, 4}, {rnum, 5},
	{type, bool}, {occurrence, optional},
	{opts, [{default, false}]}],
       [{name, accepts_r_json}, {fnum, 5}, {rnum, 6},
	{type, bool}, {occurrence, optional},
	{opts, [{default, false}]}],
       [{name, global_optargs}, {fnum, 6}, {rnum, 7},
	{type, {msg, 'Query.AssocPair'}},
	{occurrence, repeated}, {opts, []}]]},
     {{msg, 'Frame'},
      [[{name, type}, {fnum, 1}, {rnum, 2},
	{type, {enum, 'Frame.FrameType'}},
	{occurrence, optional}, {opts, []}],
       [{name, pos}, {fnum, 2}, {rnum, 3}, {type, int64},
	{occurrence, optional}, {opts, []}],
       [{name, opt}, {fnum, 3}, {rnum, 4}, {type, string},
	{occurrence, optional}, {opts, []}]]},
     {{msg, 'Backtrace'},
      [[{name, frames}, {fnum, 1}, {rnum, 2},
	{type, {msg, 'Frame'}}, {occurrence, repeated},
	{opts, []}]]},
     {{msg, 'Response'},
      [[{name, type}, {fnum, 1}, {rnum, 2},
	{type, {enum, 'Response.ResponseType'}},
	{occurrence, optional}, {opts, []}],
       [{name, error_type}, {fnum, 7}, {rnum, 3},
	{type, {enum, 'Response.ErrorType'}},
	{occurrence, optional}, {opts, []}],
       [{name, notes}, {fnum, 6}, {rnum, 4},
	{type, {enum, 'Response.ResponseNote'}},
	{occurrence, repeated}, {opts, []}],
       [{name, token}, {fnum, 2}, {rnum, 5}, {type, int64},
	{occurrence, optional}, {opts, []}],
       [{name, response}, {fnum, 3}, {rnum, 6},
	{type, {msg, 'Datum'}}, {occurrence, repeated},
	{opts, []}],
       [{name, backtrace}, {fnum, 4}, {rnum, 7},
	{type, {msg, 'Backtrace'}}, {occurrence, optional},
	{opts, []}],
       [{name, profile}, {fnum, 5}, {rnum, 8},
	{type, {msg, 'Datum'}}, {occurrence, optional},
	{opts, []}]]},
     {{msg, 'Datum.AssocPair'},
      [[{name, key}, {fnum, 1}, {rnum, 2}, {type, string},
	{occurrence, optional}, {opts, []}],
       [{name, val}, {fnum, 2}, {rnum, 3},
	{type, {msg, 'Datum'}}, {occurrence, optional},
	{opts, []}]]},
     {{msg, 'Datum'},
      [[{name, type}, {fnum, 1}, {rnum, 2},
	{type, {enum, 'Datum.DatumType'}},
	{occurrence, optional}, {opts, []}],
       [{name, r_bool}, {fnum, 2}, {rnum, 3}, {type, bool},
	{occurrence, optional}, {opts, []}],
       [{name, r_num}, {fnum, 3}, {rnum, 4}, {type, double},
	{occurrence, optional}, {opts, []}],
       [{name, r_str}, {fnum, 4}, {rnum, 5}, {type, string},
	{occurrence, optional}, {opts, []}],
       [{name, r_array}, {fnum, 5}, {rnum, 6},
	{type, {msg, 'Datum'}}, {occurrence, repeated},
	{opts, []}],
       [{name, r_object}, {fnum, 6}, {rnum, 7},
	{type, {msg, 'Datum.AssocPair'}},
	{occurrence, repeated}, {opts, []}]]},
     {{msg, 'Term.AssocPair'},
      [[{name, key}, {fnum, 1}, {rnum, 2}, {type, string},
	{occurrence, optional}, {opts, []}],
       [{name, val}, {fnum, 2}, {rnum, 3},
	{type, {msg, 'Term'}}, {occurrence, optional},
	{opts, []}]]},
     {{msg, 'Term'},
      [[{name, type}, {fnum, 1}, {rnum, 2},
	{type, {enum, 'Term.TermType'}}, {occurrence, optional},
	{opts, []}],
       [{name, datum}, {fnum, 2}, {rnum, 3},
	{type, {msg, 'Datum'}}, {occurrence, optional},
	{opts, []}],
       [{name, args}, {fnum, 3}, {rnum, 4},
	{type, {msg, 'Term'}}, {occurrence, repeated},
	{opts, []}],
       [{name, optargs}, {fnum, 4}, {rnum, 5},
	{type, {msg, 'Term.AssocPair'}}, {occurrence, repeated},
	{opts, []}]]}].


get_msg_names() ->
    ['VersionDummy', 'Query.AssocPair', 'Query', 'Frame',
     'Backtrace', 'Response', 'Datum.AssocPair', 'Datum',
     'Term.AssocPair', 'Term'].


get_enum_names() ->
    ['VersionDummy.Version', 'VersionDummy.Protocol',
     'Query.QueryType', 'Frame.FrameType',
     'Response.ResponseType', 'Response.ErrorType',
     'Response.ResponseNote', 'Datum.DatumType',
     'Term.TermType'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('VersionDummy') -> [];
find_msg_def('Query.AssocPair') ->
    [[{name, key}, {fnum, 1}, {rnum, 2}, {type, string},
      {occurrence, optional}, {opts, []}],
     [{name, val}, {fnum, 2}, {rnum, 3},
      {type, {msg, 'Term'}}, {occurrence, optional},
      {opts, []}]];
find_msg_def('Query') ->
    [[{name, type}, {fnum, 1}, {rnum, 2},
      {type, {enum, 'Query.QueryType'}},
      {occurrence, optional}, {opts, []}],
     [{name, query}, {fnum, 2}, {rnum, 3},
      {type, {msg, 'Term'}}, {occurrence, optional},
      {opts, []}],
     [{name, token}, {fnum, 3}, {rnum, 4}, {type, int64},
      {occurrence, optional}, {opts, []}],
     [{name, 'OBSOLETE_noreply'}, {fnum, 4}, {rnum, 5},
      {type, bool}, {occurrence, optional},
      {opts, [{default, false}]}],
     [{name, accepts_r_json}, {fnum, 5}, {rnum, 6},
      {type, bool}, {occurrence, optional},
      {opts, [{default, false}]}],
     [{name, global_optargs}, {fnum, 6}, {rnum, 7},
      {type, {msg, 'Query.AssocPair'}},
      {occurrence, repeated}, {opts, []}]];
find_msg_def('Frame') ->
    [[{name, type}, {fnum, 1}, {rnum, 2},
      {type, {enum, 'Frame.FrameType'}},
      {occurrence, optional}, {opts, []}],
     [{name, pos}, {fnum, 2}, {rnum, 3}, {type, int64},
      {occurrence, optional}, {opts, []}],
     [{name, opt}, {fnum, 3}, {rnum, 4}, {type, string},
      {occurrence, optional}, {opts, []}]];
find_msg_def('Backtrace') ->
    [[{name, frames}, {fnum, 1}, {rnum, 2},
      {type, {msg, 'Frame'}}, {occurrence, repeated},
      {opts, []}]];
find_msg_def('Response') ->
    [[{name, type}, {fnum, 1}, {rnum, 2},
      {type, {enum, 'Response.ResponseType'}},
      {occurrence, optional}, {opts, []}],
     [{name, error_type}, {fnum, 7}, {rnum, 3},
      {type, {enum, 'Response.ErrorType'}},
      {occurrence, optional}, {opts, []}],
     [{name, notes}, {fnum, 6}, {rnum, 4},
      {type, {enum, 'Response.ResponseNote'}},
      {occurrence, repeated}, {opts, []}],
     [{name, token}, {fnum, 2}, {rnum, 5}, {type, int64},
      {occurrence, optional}, {opts, []}],
     [{name, response}, {fnum, 3}, {rnum, 6},
      {type, {msg, 'Datum'}}, {occurrence, repeated},
      {opts, []}],
     [{name, backtrace}, {fnum, 4}, {rnum, 7},
      {type, {msg, 'Backtrace'}}, {occurrence, optional},
      {opts, []}],
     [{name, profile}, {fnum, 5}, {rnum, 8},
      {type, {msg, 'Datum'}}, {occurrence, optional},
      {opts, []}]];
find_msg_def('Datum.AssocPair') ->
    [[{name, key}, {fnum, 1}, {rnum, 2}, {type, string},
      {occurrence, optional}, {opts, []}],
     [{name, val}, {fnum, 2}, {rnum, 3},
      {type, {msg, 'Datum'}}, {occurrence, optional},
      {opts, []}]];
find_msg_def('Datum') ->
    [[{name, type}, {fnum, 1}, {rnum, 2},
      {type, {enum, 'Datum.DatumType'}},
      {occurrence, optional}, {opts, []}],
     [{name, r_bool}, {fnum, 2}, {rnum, 3}, {type, bool},
      {occurrence, optional}, {opts, []}],
     [{name, r_num}, {fnum, 3}, {rnum, 4}, {type, double},
      {occurrence, optional}, {opts, []}],
     [{name, r_str}, {fnum, 4}, {rnum, 5}, {type, string},
      {occurrence, optional}, {opts, []}],
     [{name, r_array}, {fnum, 5}, {rnum, 6},
      {type, {msg, 'Datum'}}, {occurrence, repeated},
      {opts, []}],
     [{name, r_object}, {fnum, 6}, {rnum, 7},
      {type, {msg, 'Datum.AssocPair'}},
      {occurrence, repeated}, {opts, []}]];
find_msg_def('Term.AssocPair') ->
    [[{name, key}, {fnum, 1}, {rnum, 2}, {type, string},
      {occurrence, optional}, {opts, []}],
     [{name, val}, {fnum, 2}, {rnum, 3},
      {type, {msg, 'Term'}}, {occurrence, optional},
      {opts, []}]];
find_msg_def('Term') ->
    [[{name, type}, {fnum, 1}, {rnum, 2},
      {type, {enum, 'Term.TermType'}}, {occurrence, optional},
      {opts, []}],
     [{name, datum}, {fnum, 2}, {rnum, 3},
      {type, {msg, 'Datum'}}, {occurrence, optional},
      {opts, []}],
     [{name, args}, {fnum, 3}, {rnum, 4},
      {type, {msg, 'Term'}}, {occurrence, repeated},
      {opts, []}],
     [{name, optargs}, {fnum, 4}, {rnum, 5},
      {type, {msg, 'Term.AssocPair'}}, {occurrence, repeated},
      {opts, []}]];
find_msg_def(_) -> error.


find_enum_def('VersionDummy.Version') ->
    [{'V0_1', 1063369270}, {'V0_2', 1915781601},
     {'V0_3', 1601562686}, {'V0_4', 1074539808},
     {'V1_0', 885177795}];
find_enum_def('VersionDummy.Protocol') ->
    [{'PROTOBUF', 656407617}, {'JSON', 2120839367}];
find_enum_def('Query.QueryType') ->
    [{'START', 1}, {'CONTINUE', 2}, {'STOP', 3},
     {'NOREPLY_WAIT', 4}, {'SERVER_INFO', 5}];
find_enum_def('Frame.FrameType') ->
    [{'POS', 1}, {'OPT', 2}];
find_enum_def('Response.ResponseType') ->
    [{'SUCCESS_ATOM', 1}, {'SUCCESS_SEQUENCE', 2},
     {'SUCCESS_PARTIAL', 3}, {'WAIT_COMPLETE', 4},
     {'SERVER_INFO', 5}, {'CLIENT_ERROR', 16},
     {'COMPILE_ERROR', 17}, {'RUNTIME_ERROR', 18}];
find_enum_def('Response.ErrorType') ->
    [{'INTERNAL', 1000000}, {'RESOURCE_LIMIT', 2000000},
     {'QUERY_LOGIC', 3000000}, {'NON_EXISTENCE', 3100000},
     {'OP_FAILED', 4100000}, {'OP_INDETERMINATE', 4200000},
     {'USER', 5000000}, {'PERMISSION_ERROR', 6000000}];
find_enum_def('Response.ResponseNote') ->
    [{'SEQUENCE_FEED', 1}, {'ATOM_FEED', 2},
     {'ORDER_BY_LIMIT_FEED', 3}, {'UNIONED_FEED', 4},
     {'INCLUDES_STATES', 5}];
find_enum_def('Datum.DatumType') ->
    [{'R_NULL', 1}, {'R_BOOL', 2}, {'R_NUM', 3},
     {'R_STR', 4}, {'R_ARRAY', 5}, {'R_OBJECT', 6},
     {'R_JSON', 7}];
find_enum_def('Term.TermType') ->
    [{'DATUM', 1}, {'MAKE_ARRAY', 2}, {'MAKE_OBJ', 3},
     {'VAR', 10}, {'JAVASCRIPT', 11}, {'UUID', 169},
     {'HTTP', 153}, {'ERROR', 12}, {'IMPLICIT_VAR', 13},
     {'DB', 14}, {'TABLE', 15}, {'GET', 16}, {'GET_ALL', 78},
     {'EQ', 17}, {'NE', 18}, {'LT', 19}, {'LE', 20},
     {'GT', 21}, {'GE', 22}, {'NOT', 23}, {'ADD', 24},
     {'SUB', 25}, {'MUL', 26}, {'DIV', 27}, {'MOD', 28},
     {'FLOOR', 183}, {'CEIL', 184}, {'ROUND', 185},
     {'APPEND', 29}, {'PREPEND', 80}, {'DIFFERENCE', 95},
     {'SET_INSERT', 88}, {'SET_INTERSECTION', 89},
     {'SET_UNION', 90}, {'SET_DIFFERENCE', 91},
     {'SLICE', 30}, {'SKIP', 70}, {'LIMIT', 71},
     {'OFFSETS_OF', 87}, {'CONTAINS', 93}, {'GET_FIELD', 31},
     {'KEYS', 94}, {'VALUES', 186}, {'OBJECT', 143},
     {'HAS_FIELDS', 32}, {'WITH_FIELDS', 96}, {'PLUCK', 33},
     {'WITHOUT', 34}, {'MERGE', 35},
     {'BETWEEN_DEPRECATED', 36}, {'BETWEEN', 182},
     {'REDUCE', 37}, {'MAP', 38}, {'FOLD', 187},
     {'FILTER', 39}, {'CONCAT_MAP', 40}, {'ORDER_BY', 41},
     {'DISTINCT', 42}, {'COUNT', 43}, {'IS_EMPTY', 86},
     {'UNION', 44}, {'NTH', 45}, {'BRACKET', 170},
     {'INNER_JOIN', 48}, {'OUTER_JOIN', 49}, {'EQ_JOIN', 50},
     {'ZIP', 72}, {'RANGE', 173}, {'INSERT_AT', 82},
     {'DELETE_AT', 83}, {'CHANGE_AT', 84}, {'SPLICE_AT', 85},
     {'COERCE_TO', 51}, {'TYPE_OF', 52}, {'UPDATE', 53},
     {'DELETE', 54}, {'REPLACE', 55}, {'INSERT', 56},
     {'DB_CREATE', 57}, {'DB_DROP', 58}, {'DB_LIST', 59},
     {'TABLE_CREATE', 60}, {'TABLE_DROP', 61},
     {'TABLE_LIST', 62}, {'CONFIG', 174}, {'STATUS', 175},
     {'WAIT', 177}, {'RECONFIGURE', 176}, {'REBALANCE', 179},
     {'SYNC', 138}, {'GRANT', 188}, {'INDEX_CREATE', 75},
     {'INDEX_DROP', 76}, {'INDEX_LIST', 77},
     {'INDEX_STATUS', 139}, {'INDEX_WAIT', 140},
     {'INDEX_RENAME', 156}, {'SET_WRITE_HOOK', 189},
     {'GET_WRITE_HOOK', 190}, {'FUNCALL', 64},
     {'BRANCH', 65}, {'OR', 66}, {'AND', 67},
     {'FOR_EACH', 68}, {'FUNC', 69}, {'ASC', 73},
     {'DESC', 74}, {'INFO', 79}, {'MATCH', 97},
     {'UPCASE', 141}, {'DOWNCASE', 142}, {'SAMPLE', 81},
     {'DEFAULT', 92}, {'JSON', 98}, {'TO_JSON_STRING', 172},
     {'ISO8601', 99}, {'TO_ISO8601', 100},
     {'EPOCH_TIME', 101}, {'TO_EPOCH_TIME', 102},
     {'NOW', 103}, {'IN_TIMEZONE', 104}, {'DURING', 105},
     {'DATE', 106}, {'TIME_OF_DAY', 126}, {'TIMEZONE', 127},
     {'YEAR', 128}, {'MONTH', 129}, {'DAY', 130},
     {'DAY_OF_WEEK', 131}, {'DAY_OF_YEAR', 132},
     {'HOURS', 133}, {'MINUTES', 134}, {'SECONDS', 135},
     {'TIME', 136}, {'MONDAY', 107}, {'TUESDAY', 108},
     {'WEDNESDAY', 109}, {'THURSDAY', 110}, {'FRIDAY', 111},
     {'SATURDAY', 112}, {'SUNDAY', 113}, {'JANUARY', 114},
     {'FEBRUARY', 115}, {'MARCH', 116}, {'APRIL', 117},
     {'MAY', 118}, {'JUNE', 119}, {'JULY', 120},
     {'AUGUST', 121}, {'SEPTEMBER', 122}, {'OCTOBER', 123},
     {'NOVEMBER', 124}, {'DECEMBER', 125}, {'LITERAL', 137},
     {'GROUP', 144}, {'SUM', 145}, {'AVG', 146},
     {'MIN', 147}, {'MAX', 148}, {'SPLIT', 149},
     {'UNGROUP', 150}, {'RANDOM', 151}, {'CHANGES', 152},
     {'ARGS', 154}, {'BINARY', 155}, {'GEOJSON', 157},
     {'TO_GEOJSON', 158}, {'POINT', 159}, {'LINE', 160},
     {'POLYGON', 161}, {'DISTANCE', 162},
     {'INTERSECTS', 163}, {'INCLUDES', 164}, {'CIRCLE', 165},
     {'GET_INTERSECTING', 166}, {'FILL', 167},
     {'GET_NEAREST', 168}, {'POLYGON_SUB', 171},
     {'MINVAL', 180}, {'MAXVAL', 181}];
find_enum_def(_) -> error.


enum_symbol_by_value('VersionDummy.Version', Value) ->
    'enum_symbol_by_value_VersionDummy.Version'(Value);
enum_symbol_by_value('VersionDummy.Protocol', Value) ->
    'enum_symbol_by_value_VersionDummy.Protocol'(Value);
enum_symbol_by_value('Query.QueryType', Value) ->
    'enum_symbol_by_value_Query.QueryType'(Value);
enum_symbol_by_value('Frame.FrameType', Value) ->
    'enum_symbol_by_value_Frame.FrameType'(Value);
enum_symbol_by_value('Response.ResponseType', Value) ->
    'enum_symbol_by_value_Response.ResponseType'(Value);
enum_symbol_by_value('Response.ErrorType', Value) ->
    'enum_symbol_by_value_Response.ErrorType'(Value);
enum_symbol_by_value('Response.ResponseNote', Value) ->
    'enum_symbol_by_value_Response.ResponseNote'(Value);
enum_symbol_by_value('Datum.DatumType', Value) ->
    'enum_symbol_by_value_Datum.DatumType'(Value);
enum_symbol_by_value('Term.TermType', Value) ->
    'enum_symbol_by_value_Term.TermType'(Value).


enum_value_by_symbol('VersionDummy.Version', Sym) ->
    'enum_value_by_symbol_VersionDummy.Version'(Sym);
enum_value_by_symbol('VersionDummy.Protocol', Sym) ->
    'enum_value_by_symbol_VersionDummy.Protocol'(Sym);
enum_value_by_symbol('Query.QueryType', Sym) ->
    'enum_value_by_symbol_Query.QueryType'(Sym);
enum_value_by_symbol('Frame.FrameType', Sym) ->
    'enum_value_by_symbol_Frame.FrameType'(Sym);
enum_value_by_symbol('Response.ResponseType', Sym) ->
    'enum_value_by_symbol_Response.ResponseType'(Sym);
enum_value_by_symbol('Response.ErrorType', Sym) ->
    'enum_value_by_symbol_Response.ErrorType'(Sym);
enum_value_by_symbol('Response.ResponseNote', Sym) ->
    'enum_value_by_symbol_Response.ResponseNote'(Sym);
enum_value_by_symbol('Datum.DatumType', Sym) ->
    'enum_value_by_symbol_Datum.DatumType'(Sym);
enum_value_by_symbol('Term.TermType', Sym) ->
    'enum_value_by_symbol_Term.TermType'(Sym).


'enum_symbol_by_value_VersionDummy.Version'(1063369270) ->
    'V0_1';
'enum_symbol_by_value_VersionDummy.Version'(1915781601) ->
    'V0_2';
'enum_symbol_by_value_VersionDummy.Version'(1601562686) ->
    'V0_3';
'enum_symbol_by_value_VersionDummy.Version'(1074539808) ->
    'V0_4';
'enum_symbol_by_value_VersionDummy.Version'(885177795) ->
    'V1_0'.


'enum_value_by_symbol_VersionDummy.Version'('V0_1') ->
    1063369270;
'enum_value_by_symbol_VersionDummy.Version'('V0_2') ->
    1915781601;
'enum_value_by_symbol_VersionDummy.Version'('V0_3') ->
    1601562686;
'enum_value_by_symbol_VersionDummy.Version'('V0_4') ->
    1074539808;
'enum_value_by_symbol_VersionDummy.Version'('V1_0') ->
    885177795.

'enum_symbol_by_value_VersionDummy.Protocol'(656407617) ->
    'PROTOBUF';
'enum_symbol_by_value_VersionDummy.Protocol'(2120839367) ->
    'JSON'.


'enum_value_by_symbol_VersionDummy.Protocol'('PROTOBUF') ->
    656407617;
'enum_value_by_symbol_VersionDummy.Protocol'('JSON') ->
    2120839367.

'enum_symbol_by_value_Query.QueryType'(1) -> 'START';
'enum_symbol_by_value_Query.QueryType'(2) -> 'CONTINUE';
'enum_symbol_by_value_Query.QueryType'(3) -> 'STOP';
'enum_symbol_by_value_Query.QueryType'(4) ->
    'NOREPLY_WAIT';
'enum_symbol_by_value_Query.QueryType'(5) ->
    'SERVER_INFO'.


'enum_value_by_symbol_Query.QueryType'('START') -> 1;
'enum_value_by_symbol_Query.QueryType'('CONTINUE') -> 2;
'enum_value_by_symbol_Query.QueryType'('STOP') -> 3;
'enum_value_by_symbol_Query.QueryType'('NOREPLY_WAIT') ->
    4;
'enum_value_by_symbol_Query.QueryType'('SERVER_INFO') ->
    5.

'enum_symbol_by_value_Frame.FrameType'(1) -> 'POS';
'enum_symbol_by_value_Frame.FrameType'(2) -> 'OPT'.


'enum_value_by_symbol_Frame.FrameType'('POS') -> 1;
'enum_value_by_symbol_Frame.FrameType'('OPT') -> 2.

'enum_symbol_by_value_Response.ResponseType'(1) ->
    'SUCCESS_ATOM';
'enum_symbol_by_value_Response.ResponseType'(2) ->
    'SUCCESS_SEQUENCE';
'enum_symbol_by_value_Response.ResponseType'(3) ->
    'SUCCESS_PARTIAL';
'enum_symbol_by_value_Response.ResponseType'(4) ->
    'WAIT_COMPLETE';
'enum_symbol_by_value_Response.ResponseType'(5) ->
    'SERVER_INFO';
'enum_symbol_by_value_Response.ResponseType'(16) ->
    'CLIENT_ERROR';
'enum_symbol_by_value_Response.ResponseType'(17) ->
    'COMPILE_ERROR';
'enum_symbol_by_value_Response.ResponseType'(18) ->
    'RUNTIME_ERROR'.


'enum_value_by_symbol_Response.ResponseType'('SUCCESS_ATOM') ->
    1;
'enum_value_by_symbol_Response.ResponseType'('SUCCESS_SEQUENCE') ->
    2;
'enum_value_by_symbol_Response.ResponseType'('SUCCESS_PARTIAL') ->
    3;
'enum_value_by_symbol_Response.ResponseType'('WAIT_COMPLETE') ->
    4;
'enum_value_by_symbol_Response.ResponseType'('SERVER_INFO') ->
    5;
'enum_value_by_symbol_Response.ResponseType'('CLIENT_ERROR') ->
    16;
'enum_value_by_symbol_Response.ResponseType'('COMPILE_ERROR') ->
    17;
'enum_value_by_symbol_Response.ResponseType'('RUNTIME_ERROR') ->
    18.

'enum_symbol_by_value_Response.ErrorType'(1000000) ->
    'INTERNAL';
'enum_symbol_by_value_Response.ErrorType'(2000000) ->
    'RESOURCE_LIMIT';
'enum_symbol_by_value_Response.ErrorType'(3000000) ->
    'QUERY_LOGIC';
'enum_symbol_by_value_Response.ErrorType'(3100000) ->
    'NON_EXISTENCE';
'enum_symbol_by_value_Response.ErrorType'(4100000) ->
    'OP_FAILED';
'enum_symbol_by_value_Response.ErrorType'(4200000) ->
    'OP_INDETERMINATE';
'enum_symbol_by_value_Response.ErrorType'(5000000) ->
    'USER';
'enum_symbol_by_value_Response.ErrorType'(6000000) ->
    'PERMISSION_ERROR'.


'enum_value_by_symbol_Response.ErrorType'('INTERNAL') ->
    1000000;
'enum_value_by_symbol_Response.ErrorType'('RESOURCE_LIMIT') ->
    2000000;
'enum_value_by_symbol_Response.ErrorType'('QUERY_LOGIC') ->
    3000000;
'enum_value_by_symbol_Response.ErrorType'('NON_EXISTENCE') ->
    3100000;
'enum_value_by_symbol_Response.ErrorType'('OP_FAILED') ->
    4100000;
'enum_value_by_symbol_Response.ErrorType'('OP_INDETERMINATE') ->
    4200000;
'enum_value_by_symbol_Response.ErrorType'('USER') ->
    5000000;
'enum_value_by_symbol_Response.ErrorType'('PERMISSION_ERROR') ->
    6000000.

'enum_symbol_by_value_Response.ResponseNote'(1) ->
    'SEQUENCE_FEED';
'enum_symbol_by_value_Response.ResponseNote'(2) ->
    'ATOM_FEED';
'enum_symbol_by_value_Response.ResponseNote'(3) ->
    'ORDER_BY_LIMIT_FEED';
'enum_symbol_by_value_Response.ResponseNote'(4) ->
    'UNIONED_FEED';
'enum_symbol_by_value_Response.ResponseNote'(5) ->
    'INCLUDES_STATES'.


'enum_value_by_symbol_Response.ResponseNote'('SEQUENCE_FEED') ->
    1;
'enum_value_by_symbol_Response.ResponseNote'('ATOM_FEED') ->
    2;
'enum_value_by_symbol_Response.ResponseNote'('ORDER_BY_LIMIT_FEED') ->
    3;
'enum_value_by_symbol_Response.ResponseNote'('UNIONED_FEED') ->
    4;
'enum_value_by_symbol_Response.ResponseNote'('INCLUDES_STATES') ->
    5.

'enum_symbol_by_value_Datum.DatumType'(1) -> 'R_NULL';
'enum_symbol_by_value_Datum.DatumType'(2) -> 'R_BOOL';
'enum_symbol_by_value_Datum.DatumType'(3) -> 'R_NUM';
'enum_symbol_by_value_Datum.DatumType'(4) -> 'R_STR';
'enum_symbol_by_value_Datum.DatumType'(5) -> 'R_ARRAY';
'enum_symbol_by_value_Datum.DatumType'(6) -> 'R_OBJECT';
'enum_symbol_by_value_Datum.DatumType'(7) -> 'R_JSON'.


'enum_value_by_symbol_Datum.DatumType'('R_NULL') -> 1;
'enum_value_by_symbol_Datum.DatumType'('R_BOOL') -> 2;
'enum_value_by_symbol_Datum.DatumType'('R_NUM') -> 3;
'enum_value_by_symbol_Datum.DatumType'('R_STR') -> 4;
'enum_value_by_symbol_Datum.DatumType'('R_ARRAY') -> 5;
'enum_value_by_symbol_Datum.DatumType'('R_OBJECT') -> 6;
'enum_value_by_symbol_Datum.DatumType'('R_JSON') -> 7.

'enum_symbol_by_value_Term.TermType'(1) -> 'DATUM';
'enum_symbol_by_value_Term.TermType'(2) -> 'MAKE_ARRAY';
'enum_symbol_by_value_Term.TermType'(3) -> 'MAKE_OBJ';
'enum_symbol_by_value_Term.TermType'(10) -> 'VAR';
'enum_symbol_by_value_Term.TermType'(11) ->
    'JAVASCRIPT';
'enum_symbol_by_value_Term.TermType'(169) -> 'UUID';
'enum_symbol_by_value_Term.TermType'(153) -> 'HTTP';
'enum_symbol_by_value_Term.TermType'(12) -> 'ERROR';
'enum_symbol_by_value_Term.TermType'(13) ->
    'IMPLICIT_VAR';
'enum_symbol_by_value_Term.TermType'(14) -> 'DB';
'enum_symbol_by_value_Term.TermType'(15) -> 'TABLE';
'enum_symbol_by_value_Term.TermType'(16) -> 'GET';
'enum_symbol_by_value_Term.TermType'(78) -> 'GET_ALL';
'enum_symbol_by_value_Term.TermType'(17) -> 'EQ';
'enum_symbol_by_value_Term.TermType'(18) -> 'NE';
'enum_symbol_by_value_Term.TermType'(19) -> 'LT';
'enum_symbol_by_value_Term.TermType'(20) -> 'LE';
'enum_symbol_by_value_Term.TermType'(21) -> 'GT';
'enum_symbol_by_value_Term.TermType'(22) -> 'GE';
'enum_symbol_by_value_Term.TermType'(23) -> 'NOT';
'enum_symbol_by_value_Term.TermType'(24) -> 'ADD';
'enum_symbol_by_value_Term.TermType'(25) -> 'SUB';
'enum_symbol_by_value_Term.TermType'(26) -> 'MUL';
'enum_symbol_by_value_Term.TermType'(27) -> 'DIV';
'enum_symbol_by_value_Term.TermType'(28) -> 'MOD';
'enum_symbol_by_value_Term.TermType'(183) -> 'FLOOR';
'enum_symbol_by_value_Term.TermType'(184) -> 'CEIL';
'enum_symbol_by_value_Term.TermType'(185) -> 'ROUND';
'enum_symbol_by_value_Term.TermType'(29) -> 'APPEND';
'enum_symbol_by_value_Term.TermType'(80) -> 'PREPEND';
'enum_symbol_by_value_Term.TermType'(95) ->
    'DIFFERENCE';
'enum_symbol_by_value_Term.TermType'(88) ->
    'SET_INSERT';
'enum_symbol_by_value_Term.TermType'(89) ->
    'SET_INTERSECTION';
'enum_symbol_by_value_Term.TermType'(90) -> 'SET_UNION';
'enum_symbol_by_value_Term.TermType'(91) ->
    'SET_DIFFERENCE';
'enum_symbol_by_value_Term.TermType'(30) -> 'SLICE';
'enum_symbol_by_value_Term.TermType'(70) -> 'SKIP';
'enum_symbol_by_value_Term.TermType'(71) -> 'LIMIT';
'enum_symbol_by_value_Term.TermType'(87) ->
    'OFFSETS_OF';
'enum_symbol_by_value_Term.TermType'(93) -> 'CONTAINS';
'enum_symbol_by_value_Term.TermType'(31) -> 'GET_FIELD';
'enum_symbol_by_value_Term.TermType'(94) -> 'KEYS';
'enum_symbol_by_value_Term.TermType'(186) -> 'VALUES';
'enum_symbol_by_value_Term.TermType'(143) -> 'OBJECT';
'enum_symbol_by_value_Term.TermType'(32) ->
    'HAS_FIELDS';
'enum_symbol_by_value_Term.TermType'(96) ->
    'WITH_FIELDS';
'enum_symbol_by_value_Term.TermType'(33) -> 'PLUCK';
'enum_symbol_by_value_Term.TermType'(34) -> 'WITHOUT';
'enum_symbol_by_value_Term.TermType'(35) -> 'MERGE';
'enum_symbol_by_value_Term.TermType'(36) ->
    'BETWEEN_DEPRECATED';
'enum_symbol_by_value_Term.TermType'(182) -> 'BETWEEN';
'enum_symbol_by_value_Term.TermType'(37) -> 'REDUCE';
'enum_symbol_by_value_Term.TermType'(38) -> 'MAP';
'enum_symbol_by_value_Term.TermType'(187) -> 'FOLD';
'enum_symbol_by_value_Term.TermType'(39) -> 'FILTER';
'enum_symbol_by_value_Term.TermType'(40) ->
    'CONCAT_MAP';
'enum_symbol_by_value_Term.TermType'(41) -> 'ORDER_BY';
'enum_symbol_by_value_Term.TermType'(42) -> 'DISTINCT';
'enum_symbol_by_value_Term.TermType'(43) -> 'COUNT';
'enum_symbol_by_value_Term.TermType'(86) -> 'IS_EMPTY';
'enum_symbol_by_value_Term.TermType'(44) -> 'UNION';
'enum_symbol_by_value_Term.TermType'(45) -> 'NTH';
'enum_symbol_by_value_Term.TermType'(170) -> 'BRACKET';
'enum_symbol_by_value_Term.TermType'(48) ->
    'INNER_JOIN';
'enum_symbol_by_value_Term.TermType'(49) ->
    'OUTER_JOIN';
'enum_symbol_by_value_Term.TermType'(50) -> 'EQ_JOIN';
'enum_symbol_by_value_Term.TermType'(72) -> 'ZIP';
'enum_symbol_by_value_Term.TermType'(173) -> 'RANGE';
'enum_symbol_by_value_Term.TermType'(82) -> 'INSERT_AT';
'enum_symbol_by_value_Term.TermType'(83) -> 'DELETE_AT';
'enum_symbol_by_value_Term.TermType'(84) -> 'CHANGE_AT';
'enum_symbol_by_value_Term.TermType'(85) -> 'SPLICE_AT';
'enum_symbol_by_value_Term.TermType'(51) -> 'COERCE_TO';
'enum_symbol_by_value_Term.TermType'(52) -> 'TYPE_OF';
'enum_symbol_by_value_Term.TermType'(53) -> 'UPDATE';
'enum_symbol_by_value_Term.TermType'(54) -> 'DELETE';
'enum_symbol_by_value_Term.TermType'(55) -> 'REPLACE';
'enum_symbol_by_value_Term.TermType'(56) -> 'INSERT';
'enum_symbol_by_value_Term.TermType'(57) -> 'DB_CREATE';
'enum_symbol_by_value_Term.TermType'(58) -> 'DB_DROP';
'enum_symbol_by_value_Term.TermType'(59) -> 'DB_LIST';
'enum_symbol_by_value_Term.TermType'(60) ->
    'TABLE_CREATE';
'enum_symbol_by_value_Term.TermType'(61) ->
    'TABLE_DROP';
'enum_symbol_by_value_Term.TermType'(62) ->
    'TABLE_LIST';
'enum_symbol_by_value_Term.TermType'(174) -> 'CONFIG';
'enum_symbol_by_value_Term.TermType'(175) -> 'STATUS';
'enum_symbol_by_value_Term.TermType'(177) -> 'WAIT';
'enum_symbol_by_value_Term.TermType'(176) ->
    'RECONFIGURE';
'enum_symbol_by_value_Term.TermType'(179) ->
    'REBALANCE';
'enum_symbol_by_value_Term.TermType'(138) -> 'SYNC';
'enum_symbol_by_value_Term.TermType'(188) -> 'GRANT';
'enum_symbol_by_value_Term.TermType'(75) ->
    'INDEX_CREATE';
'enum_symbol_by_value_Term.TermType'(76) ->
    'INDEX_DROP';
'enum_symbol_by_value_Term.TermType'(77) ->
    'INDEX_LIST';
'enum_symbol_by_value_Term.TermType'(139) ->
    'INDEX_STATUS';
'enum_symbol_by_value_Term.TermType'(140) ->
    'INDEX_WAIT';
'enum_symbol_by_value_Term.TermType'(156) ->
    'INDEX_RENAME';
'enum_symbol_by_value_Term.TermType'(189) ->
    'SET_WRITE_HOOK';
'enum_symbol_by_value_Term.TermType'(190) ->
    'GET_WRITE_HOOK';
'enum_symbol_by_value_Term.TermType'(64) -> 'FUNCALL';
'enum_symbol_by_value_Term.TermType'(65) -> 'BRANCH';
'enum_symbol_by_value_Term.TermType'(66) -> 'OR';
'enum_symbol_by_value_Term.TermType'(67) -> 'AND';
'enum_symbol_by_value_Term.TermType'(68) -> 'FOR_EACH';
'enum_symbol_by_value_Term.TermType'(69) -> 'FUNC';
'enum_symbol_by_value_Term.TermType'(73) -> 'ASC';
'enum_symbol_by_value_Term.TermType'(74) -> 'DESC';
'enum_symbol_by_value_Term.TermType'(79) -> 'INFO';
'enum_symbol_by_value_Term.TermType'(97) -> 'MATCH';
'enum_symbol_by_value_Term.TermType'(141) -> 'UPCASE';
'enum_symbol_by_value_Term.TermType'(142) -> 'DOWNCASE';
'enum_symbol_by_value_Term.TermType'(81) -> 'SAMPLE';
'enum_symbol_by_value_Term.TermType'(92) -> 'DEFAULT';
'enum_symbol_by_value_Term.TermType'(98) -> 'JSON';
'enum_symbol_by_value_Term.TermType'(172) ->
    'TO_JSON_STRING';
'enum_symbol_by_value_Term.TermType'(99) -> 'ISO8601';
'enum_symbol_by_value_Term.TermType'(100) ->
    'TO_ISO8601';
'enum_symbol_by_value_Term.TermType'(101) ->
    'EPOCH_TIME';
'enum_symbol_by_value_Term.TermType'(102) ->
    'TO_EPOCH_TIME';
'enum_symbol_by_value_Term.TermType'(103) -> 'NOW';
'enum_symbol_by_value_Term.TermType'(104) ->
    'IN_TIMEZONE';
'enum_symbol_by_value_Term.TermType'(105) -> 'DURING';
'enum_symbol_by_value_Term.TermType'(106) -> 'DATE';
'enum_symbol_by_value_Term.TermType'(126) ->
    'TIME_OF_DAY';
'enum_symbol_by_value_Term.TermType'(127) -> 'TIMEZONE';
'enum_symbol_by_value_Term.TermType'(128) -> 'YEAR';
'enum_symbol_by_value_Term.TermType'(129) -> 'MONTH';
'enum_symbol_by_value_Term.TermType'(130) -> 'DAY';
'enum_symbol_by_value_Term.TermType'(131) ->
    'DAY_OF_WEEK';
'enum_symbol_by_value_Term.TermType'(132) ->
    'DAY_OF_YEAR';
'enum_symbol_by_value_Term.TermType'(133) -> 'HOURS';
'enum_symbol_by_value_Term.TermType'(134) -> 'MINUTES';
'enum_symbol_by_value_Term.TermType'(135) -> 'SECONDS';
'enum_symbol_by_value_Term.TermType'(136) -> 'TIME';
'enum_symbol_by_value_Term.TermType'(107) -> 'MONDAY';
'enum_symbol_by_value_Term.TermType'(108) -> 'TUESDAY';
'enum_symbol_by_value_Term.TermType'(109) ->
    'WEDNESDAY';
'enum_symbol_by_value_Term.TermType'(110) -> 'THURSDAY';
'enum_symbol_by_value_Term.TermType'(111) -> 'FRIDAY';
'enum_symbol_by_value_Term.TermType'(112) -> 'SATURDAY';
'enum_symbol_by_value_Term.TermType'(113) -> 'SUNDAY';
'enum_symbol_by_value_Term.TermType'(114) -> 'JANUARY';
'enum_symbol_by_value_Term.TermType'(115) -> 'FEBRUARY';
'enum_symbol_by_value_Term.TermType'(116) -> 'MARCH';
'enum_symbol_by_value_Term.TermType'(117) -> 'APRIL';
'enum_symbol_by_value_Term.TermType'(118) -> 'MAY';
'enum_symbol_by_value_Term.TermType'(119) -> 'JUNE';
'enum_symbol_by_value_Term.TermType'(120) -> 'JULY';
'enum_symbol_by_value_Term.TermType'(121) -> 'AUGUST';
'enum_symbol_by_value_Term.TermType'(122) ->
    'SEPTEMBER';
'enum_symbol_by_value_Term.TermType'(123) -> 'OCTOBER';
'enum_symbol_by_value_Term.TermType'(124) -> 'NOVEMBER';
'enum_symbol_by_value_Term.TermType'(125) -> 'DECEMBER';
'enum_symbol_by_value_Term.TermType'(137) -> 'LITERAL';
'enum_symbol_by_value_Term.TermType'(144) -> 'GROUP';
'enum_symbol_by_value_Term.TermType'(145) -> 'SUM';
'enum_symbol_by_value_Term.TermType'(146) -> 'AVG';
'enum_symbol_by_value_Term.TermType'(147) -> 'MIN';
'enum_symbol_by_value_Term.TermType'(148) -> 'MAX';
'enum_symbol_by_value_Term.TermType'(149) -> 'SPLIT';
'enum_symbol_by_value_Term.TermType'(150) -> 'UNGROUP';
'enum_symbol_by_value_Term.TermType'(151) -> 'RANDOM';
'enum_symbol_by_value_Term.TermType'(152) -> 'CHANGES';
'enum_symbol_by_value_Term.TermType'(154) -> 'ARGS';
'enum_symbol_by_value_Term.TermType'(155) -> 'BINARY';
'enum_symbol_by_value_Term.TermType'(157) -> 'GEOJSON';
'enum_symbol_by_value_Term.TermType'(158) ->
    'TO_GEOJSON';
'enum_symbol_by_value_Term.TermType'(159) -> 'POINT';
'enum_symbol_by_value_Term.TermType'(160) -> 'LINE';
'enum_symbol_by_value_Term.TermType'(161) -> 'POLYGON';
'enum_symbol_by_value_Term.TermType'(162) -> 'DISTANCE';
'enum_symbol_by_value_Term.TermType'(163) ->
    'INTERSECTS';
'enum_symbol_by_value_Term.TermType'(164) -> 'INCLUDES';
'enum_symbol_by_value_Term.TermType'(165) -> 'CIRCLE';
'enum_symbol_by_value_Term.TermType'(166) ->
    'GET_INTERSECTING';
'enum_symbol_by_value_Term.TermType'(167) -> 'FILL';
'enum_symbol_by_value_Term.TermType'(168) ->
    'GET_NEAREST';
'enum_symbol_by_value_Term.TermType'(171) ->
    'POLYGON_SUB';
'enum_symbol_by_value_Term.TermType'(180) -> 'MINVAL';
'enum_symbol_by_value_Term.TermType'(181) -> 'MAXVAL'.


'enum_value_by_symbol_Term.TermType'('DATUM') -> 1;
'enum_value_by_symbol_Term.TermType'('MAKE_ARRAY') -> 2;
'enum_value_by_symbol_Term.TermType'('MAKE_OBJ') -> 3;
'enum_value_by_symbol_Term.TermType'('VAR') -> 10;
'enum_value_by_symbol_Term.TermType'('JAVASCRIPT') ->
    11;
'enum_value_by_symbol_Term.TermType'('UUID') -> 169;
'enum_value_by_symbol_Term.TermType'('HTTP') -> 153;
'enum_value_by_symbol_Term.TermType'('ERROR') -> 12;
'enum_value_by_symbol_Term.TermType'('IMPLICIT_VAR') ->
    13;
'enum_value_by_symbol_Term.TermType'('DB') -> 14;
'enum_value_by_symbol_Term.TermType'('TABLE') -> 15;
'enum_value_by_symbol_Term.TermType'('GET') -> 16;
'enum_value_by_symbol_Term.TermType'('GET_ALL') -> 78;
'enum_value_by_symbol_Term.TermType'('EQ') -> 17;
'enum_value_by_symbol_Term.TermType'('NE') -> 18;
'enum_value_by_symbol_Term.TermType'('LT') -> 19;
'enum_value_by_symbol_Term.TermType'('LE') -> 20;
'enum_value_by_symbol_Term.TermType'('GT') -> 21;
'enum_value_by_symbol_Term.TermType'('GE') -> 22;
'enum_value_by_symbol_Term.TermType'('NOT') -> 23;
'enum_value_by_symbol_Term.TermType'('ADD') -> 24;
'enum_value_by_symbol_Term.TermType'('SUB') -> 25;
'enum_value_by_symbol_Term.TermType'('MUL') -> 26;
'enum_value_by_symbol_Term.TermType'('DIV') -> 27;
'enum_value_by_symbol_Term.TermType'('MOD') -> 28;
'enum_value_by_symbol_Term.TermType'('FLOOR') -> 183;
'enum_value_by_symbol_Term.TermType'('CEIL') -> 184;
'enum_value_by_symbol_Term.TermType'('ROUND') -> 185;
'enum_value_by_symbol_Term.TermType'('APPEND') -> 29;
'enum_value_by_symbol_Term.TermType'('PREPEND') -> 80;
'enum_value_by_symbol_Term.TermType'('DIFFERENCE') ->
    95;
'enum_value_by_symbol_Term.TermType'('SET_INSERT') ->
    88;
'enum_value_by_symbol_Term.TermType'('SET_INTERSECTION') ->
    89;
'enum_value_by_symbol_Term.TermType'('SET_UNION') -> 90;
'enum_value_by_symbol_Term.TermType'('SET_DIFFERENCE') ->
    91;
'enum_value_by_symbol_Term.TermType'('SLICE') -> 30;
'enum_value_by_symbol_Term.TermType'('SKIP') -> 70;
'enum_value_by_symbol_Term.TermType'('LIMIT') -> 71;
'enum_value_by_symbol_Term.TermType'('OFFSETS_OF') ->
    87;
'enum_value_by_symbol_Term.TermType'('CONTAINS') -> 93;
'enum_value_by_symbol_Term.TermType'('GET_FIELD') -> 31;
'enum_value_by_symbol_Term.TermType'('KEYS') -> 94;
'enum_value_by_symbol_Term.TermType'('VALUES') -> 186;
'enum_value_by_symbol_Term.TermType'('OBJECT') -> 143;
'enum_value_by_symbol_Term.TermType'('HAS_FIELDS') ->
    32;
'enum_value_by_symbol_Term.TermType'('WITH_FIELDS') ->
    96;
'enum_value_by_symbol_Term.TermType'('PLUCK') -> 33;
'enum_value_by_symbol_Term.TermType'('WITHOUT') -> 34;
'enum_value_by_symbol_Term.TermType'('MERGE') -> 35;
'enum_value_by_symbol_Term.TermType'('BETWEEN_DEPRECATED') ->
    36;
'enum_value_by_symbol_Term.TermType'('BETWEEN') -> 182;
'enum_value_by_symbol_Term.TermType'('REDUCE') -> 37;
'enum_value_by_symbol_Term.TermType'('MAP') -> 38;
'enum_value_by_symbol_Term.TermType'('FOLD') -> 187;
'enum_value_by_symbol_Term.TermType'('FILTER') -> 39;
'enum_value_by_symbol_Term.TermType'('CONCAT_MAP') ->
    40;
'enum_value_by_symbol_Term.TermType'('ORDER_BY') -> 41;
'enum_value_by_symbol_Term.TermType'('DISTINCT') -> 42;
'enum_value_by_symbol_Term.TermType'('COUNT') -> 43;
'enum_value_by_symbol_Term.TermType'('IS_EMPTY') -> 86;
'enum_value_by_symbol_Term.TermType'('UNION') -> 44;
'enum_value_by_symbol_Term.TermType'('NTH') -> 45;
'enum_value_by_symbol_Term.TermType'('BRACKET') -> 170;
'enum_value_by_symbol_Term.TermType'('INNER_JOIN') ->
    48;
'enum_value_by_symbol_Term.TermType'('OUTER_JOIN') ->
    49;
'enum_value_by_symbol_Term.TermType'('EQ_JOIN') -> 50;
'enum_value_by_symbol_Term.TermType'('ZIP') -> 72;
'enum_value_by_symbol_Term.TermType'('RANGE') -> 173;
'enum_value_by_symbol_Term.TermType'('INSERT_AT') -> 82;
'enum_value_by_symbol_Term.TermType'('DELETE_AT') -> 83;
'enum_value_by_symbol_Term.TermType'('CHANGE_AT') -> 84;
'enum_value_by_symbol_Term.TermType'('SPLICE_AT') -> 85;
'enum_value_by_symbol_Term.TermType'('COERCE_TO') -> 51;
'enum_value_by_symbol_Term.TermType'('TYPE_OF') -> 52;
'enum_value_by_symbol_Term.TermType'('UPDATE') -> 53;
'enum_value_by_symbol_Term.TermType'('DELETE') -> 54;
'enum_value_by_symbol_Term.TermType'('REPLACE') -> 55;
'enum_value_by_symbol_Term.TermType'('INSERT') -> 56;
'enum_value_by_symbol_Term.TermType'('DB_CREATE') -> 57;
'enum_value_by_symbol_Term.TermType'('DB_DROP') -> 58;
'enum_value_by_symbol_Term.TermType'('DB_LIST') -> 59;
'enum_value_by_symbol_Term.TermType'('TABLE_CREATE') ->
    60;
'enum_value_by_symbol_Term.TermType'('TABLE_DROP') ->
    61;
'enum_value_by_symbol_Term.TermType'('TABLE_LIST') ->
    62;
'enum_value_by_symbol_Term.TermType'('CONFIG') -> 174;
'enum_value_by_symbol_Term.TermType'('STATUS') -> 175;
'enum_value_by_symbol_Term.TermType'('WAIT') -> 177;
'enum_value_by_symbol_Term.TermType'('RECONFIGURE') ->
    176;
'enum_value_by_symbol_Term.TermType'('REBALANCE') ->
    179;
'enum_value_by_symbol_Term.TermType'('SYNC') -> 138;
'enum_value_by_symbol_Term.TermType'('GRANT') -> 188;
'enum_value_by_symbol_Term.TermType'('INDEX_CREATE') ->
    75;
'enum_value_by_symbol_Term.TermType'('INDEX_DROP') ->
    76;
'enum_value_by_symbol_Term.TermType'('INDEX_LIST') ->
    77;
'enum_value_by_symbol_Term.TermType'('INDEX_STATUS') ->
    139;
'enum_value_by_symbol_Term.TermType'('INDEX_WAIT') ->
    140;
'enum_value_by_symbol_Term.TermType'('INDEX_RENAME') ->
    156;
'enum_value_by_symbol_Term.TermType'('SET_WRITE_HOOK') ->
    189;
'enum_value_by_symbol_Term.TermType'('GET_WRITE_HOOK') ->
    190;
'enum_value_by_symbol_Term.TermType'('FUNCALL') -> 64;
'enum_value_by_symbol_Term.TermType'('BRANCH') -> 65;
'enum_value_by_symbol_Term.TermType'('OR') -> 66;
'enum_value_by_symbol_Term.TermType'('AND') -> 67;
'enum_value_by_symbol_Term.TermType'('FOR_EACH') -> 68;
'enum_value_by_symbol_Term.TermType'('FUNC') -> 69;
'enum_value_by_symbol_Term.TermType'('ASC') -> 73;
'enum_value_by_symbol_Term.TermType'('DESC') -> 74;
'enum_value_by_symbol_Term.TermType'('INFO') -> 79;
'enum_value_by_symbol_Term.TermType'('MATCH') -> 97;
'enum_value_by_symbol_Term.TermType'('UPCASE') -> 141;
'enum_value_by_symbol_Term.TermType'('DOWNCASE') -> 142;
'enum_value_by_symbol_Term.TermType'('SAMPLE') -> 81;
'enum_value_by_symbol_Term.TermType'('DEFAULT') -> 92;
'enum_value_by_symbol_Term.TermType'('JSON') -> 98;
'enum_value_by_symbol_Term.TermType'('TO_JSON_STRING') ->
    172;
'enum_value_by_symbol_Term.TermType'('ISO8601') -> 99;
'enum_value_by_symbol_Term.TermType'('TO_ISO8601') ->
    100;
'enum_value_by_symbol_Term.TermType'('EPOCH_TIME') ->
    101;
'enum_value_by_symbol_Term.TermType'('TO_EPOCH_TIME') ->
    102;
'enum_value_by_symbol_Term.TermType'('NOW') -> 103;
'enum_value_by_symbol_Term.TermType'('IN_TIMEZONE') ->
    104;
'enum_value_by_symbol_Term.TermType'('DURING') -> 105;
'enum_value_by_symbol_Term.TermType'('DATE') -> 106;
'enum_value_by_symbol_Term.TermType'('TIME_OF_DAY') ->
    126;
'enum_value_by_symbol_Term.TermType'('TIMEZONE') -> 127;
'enum_value_by_symbol_Term.TermType'('YEAR') -> 128;
'enum_value_by_symbol_Term.TermType'('MONTH') -> 129;
'enum_value_by_symbol_Term.TermType'('DAY') -> 130;
'enum_value_by_symbol_Term.TermType'('DAY_OF_WEEK') ->
    131;
'enum_value_by_symbol_Term.TermType'('DAY_OF_YEAR') ->
    132;
'enum_value_by_symbol_Term.TermType'('HOURS') -> 133;
'enum_value_by_symbol_Term.TermType'('MINUTES') -> 134;
'enum_value_by_symbol_Term.TermType'('SECONDS') -> 135;
'enum_value_by_symbol_Term.TermType'('TIME') -> 136;
'enum_value_by_symbol_Term.TermType'('MONDAY') -> 107;
'enum_value_by_symbol_Term.TermType'('TUESDAY') -> 108;
'enum_value_by_symbol_Term.TermType'('WEDNESDAY') ->
    109;
'enum_value_by_symbol_Term.TermType'('THURSDAY') -> 110;
'enum_value_by_symbol_Term.TermType'('FRIDAY') -> 111;
'enum_value_by_symbol_Term.TermType'('SATURDAY') -> 112;
'enum_value_by_symbol_Term.TermType'('SUNDAY') -> 113;
'enum_value_by_symbol_Term.TermType'('JANUARY') -> 114;
'enum_value_by_symbol_Term.TermType'('FEBRUARY') -> 115;
'enum_value_by_symbol_Term.TermType'('MARCH') -> 116;
'enum_value_by_symbol_Term.TermType'('APRIL') -> 117;
'enum_value_by_symbol_Term.TermType'('MAY') -> 118;
'enum_value_by_symbol_Term.TermType'('JUNE') -> 119;
'enum_value_by_symbol_Term.TermType'('JULY') -> 120;
'enum_value_by_symbol_Term.TermType'('AUGUST') -> 121;
'enum_value_by_symbol_Term.TermType'('SEPTEMBER') ->
    122;
'enum_value_by_symbol_Term.TermType'('OCTOBER') -> 123;
'enum_value_by_symbol_Term.TermType'('NOVEMBER') -> 124;
'enum_value_by_symbol_Term.TermType'('DECEMBER') -> 125;
'enum_value_by_symbol_Term.TermType'('LITERAL') -> 137;
'enum_value_by_symbol_Term.TermType'('GROUP') -> 144;
'enum_value_by_symbol_Term.TermType'('SUM') -> 145;
'enum_value_by_symbol_Term.TermType'('AVG') -> 146;
'enum_value_by_symbol_Term.TermType'('MIN') -> 147;
'enum_value_by_symbol_Term.TermType'('MAX') -> 148;
'enum_value_by_symbol_Term.TermType'('SPLIT') -> 149;
'enum_value_by_symbol_Term.TermType'('UNGROUP') -> 150;
'enum_value_by_symbol_Term.TermType'('RANDOM') -> 151;
'enum_value_by_symbol_Term.TermType'('CHANGES') -> 152;
'enum_value_by_symbol_Term.TermType'('ARGS') -> 154;
'enum_value_by_symbol_Term.TermType'('BINARY') -> 155;
'enum_value_by_symbol_Term.TermType'('GEOJSON') -> 157;
'enum_value_by_symbol_Term.TermType'('TO_GEOJSON') ->
    158;
'enum_value_by_symbol_Term.TermType'('POINT') -> 159;
'enum_value_by_symbol_Term.TermType'('LINE') -> 160;
'enum_value_by_symbol_Term.TermType'('POLYGON') -> 161;
'enum_value_by_symbol_Term.TermType'('DISTANCE') -> 162;
'enum_value_by_symbol_Term.TermType'('INTERSECTS') ->
    163;
'enum_value_by_symbol_Term.TermType'('INCLUDES') -> 164;
'enum_value_by_symbol_Term.TermType'('CIRCLE') -> 165;
'enum_value_by_symbol_Term.TermType'('GET_INTERSECTING') ->
    166;
'enum_value_by_symbol_Term.TermType'('FILL') -> 167;
'enum_value_by_symbol_Term.TermType'('GET_NEAREST') ->
    168;
'enum_value_by_symbol_Term.TermType'('POLYGON_SUB') ->
    171;
'enum_value_by_symbol_Term.TermType'('MINVAL') -> 180;
'enum_value_by_symbol_Term.TermType'('MAXVAL') -> 181.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "3.25.2".

gpb_version_as_list() ->
    [3,25,2].
